.. py:class:: DEERSequence(*, tau1, tau2, tau3=None, tau4=None, dt, B, LO, reptime, averages, shots, ESEEM_avg=None, **kwargs)


   Bases: :py:obj:`Sequence`

   Represents a DEER/PELDOR sequence. 


   Build a DEER sequence using rectangular pulses


   :Parameters:

       **tau1** : int or float
           The first interpulse delay in us

       **tau2** : int or float
           The second interpulse delay in us

       **dt** : int or float
           The time step for DEER measurment in ns

       **B** : int or float
           The B0 field, in Guass

       **LO** : int or float
           The LO frequency in GHz

       **reptime** : _type_
           The shot repetition time in us

       **averages** : int
           The number of scans.

       **shots** : int
           The number of shots per point

       **tau3** : int or float, optional
           The delay between the first static pump pulse in 5-pulse DEER and 
           the 1st refocusing pulse in us, by default None. If the value is 
           None then a 4-pulse sequence is created, otherwise a 5-pulse. 

       **ESEEM_avg: str**
           Selecting the ESEEM averaging required. ESEEM averaging works by 
           introducing small stepping in the first tau delay and averaging 
           across them all. Options:
           * `proton` - 8 small steps of 8ns
           * `deuteron` - 8 small steps of 16ns
           * None - default














   ..
       !! processed by numpydoc !!

   .. py:attribute:: tau1us

      

   .. py:attribute:: tau1

      

   .. py:attribute:: tau2

      

   .. py:attribute:: dt

      

   .. py:attribute:: deadtime
      :value: '200'

      

   .. py:attribute:: ESEEM
      :value: 'False'

      

   .. py:method:: add_ESEEM_avg(type=None)


   .. py:method:: three_pulse(tp=16)

      
      Build a four pulse DEER sequence.


      :Parameters:

          **tp** : float
              Length of default RectPulse in ns, by default 16ns.














      ..
          !! processed by numpydoc !!

   .. py:method:: four_pulse(tp=16, relaxation=False)

      
      Build a four pulse DEER sequence.


      :Parameters:

          **tp** : float
              Length of default RectPulse in ns, by default 16ns.














      ..
          !! processed by numpydoc !!

   .. py:method:: five_pulse(tp=16, relaxation=False, re_step=50, re_dim=100)

      
      Build a five pulse DEER sequence.


      :Parameters:

          **tp** : float
              Length of default RectPulse in ns, by default 16ns.














      ..
          !! processed by numpydoc !!

   .. py:method:: seven_pulse(tp=16, relaxation=False)

      
      Build a seven pulse DEER sequence.


      :Parameters:

          **tp** : float
              Length of default RectPulse in ns, by default 16ns.














      ..
          !! processed by numpydoc !!

   .. py:method:: nDEER_CP(n, tp=16, relaxation=False, pcyc='Normal')

      
      Generate an nDEER sequence.

      The sum of tau1 and tau2 is used as total trace length. 

      :Parameters:

          **n** : int
              The number of refocusing pulses

          **tp** : int, optional
              _description_, by default 16

          **relaxation** : bool, optional
              _description_, by default False

          **pcyc: str, optional**
              Normal: Phases cycles pump and observer pulses, no DC cycle
              NormalDC: Phases cycles pump and observer pulses, DC cycle
              Obs: Phases cycles observer pulses, no DC cycle
              ObsDC: Phases cycles and observer pulses, DC cycle














      ..
          !! processed by numpydoc !!

   .. py:method:: select_pcyc(option)

      
      Choose which DEER phase you would like.

      .. |xp| replace:: x\ :sub:`p`

      .. table::
          :width: 150
          :widths: 10 10 10 5 30 30 5

          +---------------------------+-------------+----------------+--------+---------------------------+-----------------------------+------------+
          | Phase cycle               | Short Code  | Sequence       | Steps  | Pulse Phase Cycle         | Remaining Echoes            | Ref.       |
          +===========================+=============+================+========+===========================+=============================+============+
          | (x)x|xp|x                 | DC          | ALL            | 2      | [+(+x)-(-x)]              | PE12rp, SE(PE12)p3, PE12rpr3|            |
          +---------------------------+-------------+----------------+--------+---------------------------+-----------------------------+------------+
          | (x)[|xp|]x                | 8step_3p    | 3 pulse        | 8      | [+(+x)-(-x)]              |                             |            |
          +---------------------------+-------------+----------------+--------+---------------------------+-----------------------------+------------+
          | x[x][|xp|]x               | 16step_4p   | 4 pulse        | 16     | [+(+x)-(+y)+(-x)-(-y)]    |                             | [1]        |
          +---------------------------+-------------+----------------+--------+                           +-----------------------------+------------+
          | x|xp|[x][|xp|]x           | 16step_5p   | 5 pulse        | 16     | [+(+x)+(+y)+(-x)+(-y)]    | PEp02r3,b PE1p0r2r3b        | [1]        |
          +---------------------------+-------------+----------------+--------+---------------------------+-----------------------------+------------+
          | x[x]|xp|(x)(|xp|)(|xp|)x  | 32step_7p   | 7 pulse        | 32     |                           |                             | [1]        |
          +---------------------------+-------------+----------------+--------+---------------------------+-----------------------------+------------+

      :Parameters:

          **option** : str
              The short code of the phase cycle. See table above.














      ..
          !! processed by numpydoc !!

   .. py:method:: simulate()


