:py:mod:`autodeer.Logging`
==========================

.. py:module:: autodeer.Logging



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   autodeer.Logging.DictFormater
   autodeer.Logging.QtLogHandler



Functions
~~~~~~~~~

.. autoapisummary::

   autodeer.Logging.setup_logs
   autodeer.Logging.change_log_level



.. py:class:: DictFormater(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)


   Bases: :py:obj:`logging.Formatter`

   Formatter instances are used to convert a LogRecord to text.

   Formatters need to know how a LogRecord is constructed. They are
   responsible for converting a LogRecord to (usually) a string which can
   be interpreted by either a human or an external system. The base Formatter
   allows a formatting string to be specified. If none is supplied, the
   style-dependent default value, "%(message)s", "{message}", or
   "${message}", is used.

   The Formatter can be initialized with a format string which makes use of
   knowledge of the LogRecord attributes - e.g. the default value mentioned
   above makes use of the fact that the user's message and arguments are pre-
   formatted into a LogRecord's message attribute. Currently, the useful
   attributes in a LogRecord are described by:

   %(name)s            Name of the logger (logging channel)
   %(levelno)s         Numeric logging level for the message (DEBUG, INFO,
                       WARNING, ERROR, CRITICAL)
   %(levelname)s       Text logging level for the message ("DEBUG", "INFO",
                       "WARNING", "ERROR", "CRITICAL")
   %(pathname)s        Full pathname of the source file where the logging
                       call was issued (if available)
   %(filename)s        Filename portion of pathname
   %(module)s          Module (name portion of filename)
   %(lineno)d          Source line number where the logging call was issued
                       (if available)
   %(funcName)s        Function name
   %(created)f         Time when the LogRecord was created (time.time()
                       return value)
   %(asctime)s         Textual time when the LogRecord was created
   %(msecs)d           Millisecond portion of the creation time
   %(relativeCreated)d Time in milliseconds when the LogRecord was created,
                       relative to the time the logging module was loaded
                       (typically at application startup time)
   %(thread)d          Thread ID (if available)
   %(threadName)s      Thread name (if available)
   %(process)d         Process ID (if available)
   %(message)s         The result of record.getMessage(), computed just as
                       the record is emitted


   Initialize the formatter with specified format strings.

   Initialize the formatter either with the specified format string, or a
   default as described above. Allow for specialized date formatting with
   the optional datefmt argument. If datefmt is omitted, you get an
   ISO8601-like (or RFC 3339-like) format.

   Use a style parameter of '%', '{' or '$' to specify that you want to
   use one of %-formatting, :meth:`str.format` (``{}``) formatting or
   :class:`string.Template` formatting in your format string.

   .. versionchanged:: 3.2
      Added the ``style`` parameter.















   ..
       !! processed by numpydoc !!

   .. py:method:: format(record)

      
      Format the specified record as text.

      The record's attribute dictionary is used as the operand to a
      string formatting operation which yields the returned string.
      Before formatting the dictionary, a couple of preparatory steps
      are carried out. The message attribute of the record is computed
      using LogRecord.getMessage(). If the formatting string uses the
      time (as determined by a call to usesTime(), formatTime() is
      called to format the event time. If there is exception information,
      it is formatted using formatException() and appended to the message.















      ..
          !! processed by numpydoc !!


.. py:class:: QtLogHandler(level=logging.NOTSET)


   Bases: :py:obj:`PyQt6.QtCore.QObject`, :py:obj:`logging.Handler`

   Handler instances dispatch logging events to specific destinations.

   The base handler class. Acts as a placeholder which defines the Handler
   interface. Handlers can optionally use Formatter instances to format
   records as desired. By default, no formatter is specified; in this case,
   the 'raw' message as determined by record.message is logged.


   Initializes the instance - basically setting the formatter to None
   and the filter list to empty.
















   ..
       !! processed by numpydoc !!

   .. py:attribute:: signal

      

   .. py:method:: emit(record)

      
      Do whatever it takes to actually log the specified logging record.

      This version is intended to be implemented by subclasses and so
      raises a NotImplementedError.















      ..
          !! processed by numpydoc !!


.. py:function:: setup_logs(folder)

   
   General command to setup system wide logging.

   Two logs are setup, a core log and a harware log. The hardware logs records
   everything releated to the hardware interfaces whilst the core logs records
   all the analysis and related modules. 















   ..
       !! processed by numpydoc !!

.. py:function:: change_log_level(core='INFO', interface='INFO')

   
   Change the log level of the core and hardware loggers.


   :Parameters:

       **core** : str
           The log level for the core logger.

       **interface** : str
           The log level for the hardware logger.














   ..
       !! processed by numpydoc !!

