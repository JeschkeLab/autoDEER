.. py:class:: Sequence(*, name, B, LO, reptime, averages, shots, **kwargs)


   Represents an experimental pulse sequence.


   Represents an experimental pulse sequence.


   :Parameters:

       **name** : str
           The name of this pulse sequence

       **B** : float
           The magnetic field for this sequence in Gauss.

       **LO** : float
           The central frequency of this sequence. I.e. The frequnecy at which
           a zero offset pulse is at. 

       **reptime** : float
           The shot repetition time in us.

       **averages** : int
           The number of scans to be accumulated.

       **shots** : itn
           The number of shots per point.














   ..
       !! processed by numpydoc !!

   .. py:property:: seqtable_steps


   .. py:method:: plot()


   .. py:method:: plot_pulse_exc(FieldSweep=None, ResonatorProfile=None)


   .. py:method:: addPulse(pulse)

      
      Adds a pulse to the next position in the sequence.


      :Parameters:

          **pulse** : Pulse
              The object describing the pulse.














      ..
          !! processed by numpydoc !!

   .. py:method:: _estimate_time()

      
      Calculates the estimated experiment time in seconds.
















      ..
          !! processed by numpydoc !!

   .. py:method:: _buildPhaseCycle()


   .. py:method:: evolution(params, reduce=[])


   .. py:method:: shift_detfreq_to_zero()


   .. py:method:: isPulseFocused()

      
      Is the sequence expressed to contain only pulses and no delays?
















      ..
          !! processed by numpydoc !!

   .. py:method:: isDelayFocused()

      
      Is the sequence expressed to contain both pulses and delays?
















      ..
          !! processed by numpydoc !!

   .. py:method:: convert(*, reduce=True)

      
      Converts the current sequence to either pulse focused or delay
      focused depending on the current state


      :Parameters:

          **reduce** : bool, optional
              Reduce to the smallest number of objects, by default True














      ..
          !! processed by numpydoc !!

   .. py:method:: _convert_to_delay()


   .. py:method:: _convert_to_pulses()


   .. py:method:: _checkRect()

      
      Checks if all the pulses in the sequence are rectangular.
















      ..
          !! processed by numpydoc !!

   .. py:method:: __str__()

      
      Return str(self).
















      ..
          !! processed by numpydoc !!

   .. py:method:: copy()


   .. py:method:: _to_dict()


   .. py:method:: _to_json()


   .. py:method:: save(filename)

      
      Save the sequence to a JSON file.


      :Parameters:

          **filename** : str
              Path to the JSON file.

      :Returns:

          None
              ..




      :Raises:

          TypeError
              If the object cannot be serialized to JSON.









      ..
          !! processed by numpydoc !!

   .. py:method:: _from_dict(dct)
      :classmethod:


   .. py:method:: _from_json(JSONstring)
      :classmethod:


   .. py:method:: load(filename)
      :classmethod:

      
      Load an object from a JSON file.


      :Parameters:

          **filename** : str
              Path to the JSON file.

      :Returns:

          **obj** : Sequence
              The Sequence loaded from the JSON file.




      :Raises:

          FileNotFoundError
              If the file does not exist.









      ..
          !! processed by numpydoc !!

