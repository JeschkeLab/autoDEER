Search.setIndex({"docnames": ["README", "_templates/autoapi/index", "_templates/autoapi/python/attribute", "_templates/autoapi/python/class", "_templates/autoapi/python/data", "_templates/autoapi/python/exception", "_templates/autoapi/python/function", "_templates/autoapi/python/method", "_templates/autoapi/python/module", "_templates/autoapi/python/package", "_templates/autoapi/python/property", "_templates/custom_class_template", "autoapi/autodeer/DEER_analysis/index", "autoapi/autodeer/FieldSweep/index", "autoapi/autodeer/Logging/index", "autoapi/autodeer/Relaxation/index", "autoapi/autodeer/ResPro/index", "autoapi/autodeer/TwoD_Experiment/index", "autoapi/autodeer/_version/index", "autoapi/autodeer/classes/index", "autoapi/autodeer/colors/index", "autoapi/autodeer/criteria/index", "autoapi/autodeer/dataset/index", "autoapi/autodeer/gui/__main__/index", "autoapi/autodeer/gui/autoDEER_worker/index", "autoapi/autodeer/gui/index", "autoapi/autodeer/gui/log/index", "autoapi/autodeer/gui/main/index", "autoapi/autodeer/gui/quickdeer/index", "autoapi/autodeer/gui/test_main/index", "autoapi/autodeer/gui/tools/index", "autoapi/autodeer/hardware/Bruker_AWG/index", "autoapi/autodeer/hardware/Bruker_MPFU/index", "autoapi/autodeer/hardware/Bruker_tools/index", "autoapi/autodeer/hardware/ETH_awg/index", "autoapi/autodeer/hardware/ETH_awg_load/index", "autoapi/autodeer/hardware/XeprAPI_link/index", "autoapi/autodeer/hardware/dummy/index", "autoapi/autodeer/hardware/dummy_xepr/index", "autoapi/autodeer/hardware/index", "autoapi/autodeer/hardware/xepr_experiments/index", "autoapi/autodeer/index", "autoapi/autodeer/pulses/index", "autoapi/autodeer/reporter/index", "autoapi/autodeer/sequences/index", "autoapi/autodeer/tools/index", "autoapi/autodeer/utils/index", "autoapi/index", "index", "source/API_docs", "source/Algorithum", "source/Install", "source/Install_python", "source/Jupyter_interface", "source/autoDEER/DEER_variants", "source/autoDEER/GUI_interface", "source/autoDEER/config_file", "source/autoDEER/index", "source/autoEPR/Bruker_interface", "source/autoEPR/Custom_interface", "source/autoEPR/Getting_Started", "source/autoEPR/Interface", "source/autoEPR/Sequencer", "source/autoEPR/index", "source/contributing", "source/dev_guide/Logging", "source/dev_guide/index", "source/gui_guide", "source/releasenotes", "source/tutorial"], "filenames": ["README.md", "_templates/autoapi/index.rst", "_templates/autoapi/python/attribute.rst", "_templates/autoapi/python/class.rst", "_templates/autoapi/python/data.rst", "_templates/autoapi/python/exception.rst", "_templates/autoapi/python/function.rst", "_templates/autoapi/python/method.rst", "_templates/autoapi/python/module.rst", "_templates/autoapi/python/package.rst", "_templates/autoapi/python/property.rst", "_templates/custom_class_template.rst", "autoapi/autodeer/DEER_analysis/index.rst", "autoapi/autodeer/FieldSweep/index.rst", "autoapi/autodeer/Logging/index.rst", "autoapi/autodeer/Relaxation/index.rst", "autoapi/autodeer/ResPro/index.rst", "autoapi/autodeer/TwoD_Experiment/index.rst", "autoapi/autodeer/_version/index.rst", "autoapi/autodeer/classes/index.rst", "autoapi/autodeer/colors/index.rst", "autoapi/autodeer/criteria/index.rst", "autoapi/autodeer/dataset/index.rst", "autoapi/autodeer/gui/__main__/index.rst", "autoapi/autodeer/gui/autoDEER_worker/index.rst", "autoapi/autodeer/gui/index.rst", "autoapi/autodeer/gui/log/index.rst", "autoapi/autodeer/gui/main/index.rst", "autoapi/autodeer/gui/quickdeer/index.rst", "autoapi/autodeer/gui/test_main/index.rst", "autoapi/autodeer/gui/tools/index.rst", "autoapi/autodeer/hardware/Bruker_AWG/index.rst", "autoapi/autodeer/hardware/Bruker_MPFU/index.rst", "autoapi/autodeer/hardware/Bruker_tools/index.rst", "autoapi/autodeer/hardware/ETH_awg/index.rst", "autoapi/autodeer/hardware/ETH_awg_load/index.rst", "autoapi/autodeer/hardware/XeprAPI_link/index.rst", "autoapi/autodeer/hardware/dummy/index.rst", "autoapi/autodeer/hardware/dummy_xepr/index.rst", "autoapi/autodeer/hardware/index.rst", "autoapi/autodeer/hardware/xepr_experiments/index.rst", "autoapi/autodeer/index.rst", "autoapi/autodeer/pulses/index.rst", "autoapi/autodeer/reporter/index.rst", "autoapi/autodeer/sequences/index.rst", "autoapi/autodeer/tools/index.rst", "autoapi/autodeer/utils/index.rst", "autoapi/index.rst", "index.rst", "source/API_docs.rst", "source/Algorithum.rst", "source/Install.rst", "source/Install_python.rst", "source/Jupyter_interface.rst", "source/autoDEER/DEER_variants.rst", "source/autoDEER/GUI_interface.rst", "source/autoDEER/config_file.rst", "source/autoDEER/index.rst", "source/autoEPR/Bruker_interface.rst", "source/autoEPR/Custom_interface.rst", "source/autoEPR/Getting_Started.rst", "source/autoEPR/Interface.rst", "source/autoEPR/Sequencer.rst", "source/autoEPR/index.rst", "source/contributing.rst", "source/dev_guide/Logging.md", "source/dev_guide/index.rst", "source/gui_guide.rst", "source/releasenotes.rst", "source/tutorial.rst"], "titles": ["Building the documentation", "API Reference", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.DEER_analysis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.FieldSweep</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.Logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.Relaxation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.ResPro</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.TwoD_Experiment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.classes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.colors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.__main__</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.autoDEER_worker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.log</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.main</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.quickdeer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.test_main</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.gui.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.Bruker_AWG</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.Bruker_MPFU</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.Bruker_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.ETH_awg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.ETH_awg_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.XeprAPI_link</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.dummy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.dummy_xepr</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.hardware.xepr_experiments</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.pulses</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.reporter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.sequences</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">autodeer.utils</span></code>", "API Reference", "Welcome to autoDEER!", "API doc", "The Automated Algorithum", "Installation", "Installing Python", "Jupyter Interface", "DEER Variants", "GUI Interface", "Configuration File", "autoDEER", "Bruker Interface", "Creating a custom interface", "Getting Started", "Interfaces", "Creating a Custom Sequence", "autoEPR", "Contributing Guide", "Logging:", "Developing", "autoDEER GUI", "Release Notes", "Tutorial"], "terms": {"The": [0, 12, 13, 14, 15, 16, 17, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 55, 56, 58, 60, 61, 62, 65, 69], "autod": [0, 47, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 65, 69], "i": [0, 4, 6, 7, 8, 12, 13, 14, 15, 16, 17, 19, 21, 25, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 69], "built": [0, 48, 53, 57, 60, 61, 62, 63, 65], "us": [0, 12, 14, 15, 16, 17, 19, 21, 31, 32, 34, 35, 36, 38, 40, 41, 44, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 67, 69], "spinx": 0, "pydata": 0, "theme": 0, "pleas": [0, 48, 54, 59, 61], "follow": [0, 42, 50, 56, 65], "instruct": [0, 52, 69], "python": [0, 2, 5, 9, 17, 35, 48, 51, 55, 57, 58, 60, 61, 62, 63, 65], "from": [0, 15, 17, 19, 24, 25, 27, 30, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 50, 53, 54, 55, 57, 58, 60, 62, 63, 65], "sourc": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 52, 58, 61], "sphinx": 0, "extens": 0, "pip": [0, 51, 58], "sphinx_toolbox": 0, "sphinx_copybutton": 0, "numpydoc": 0, "furo": 0, "galleri": 0, "design": [0, 50, 57, 61, 63], "upgrad": [0, 58], "myst": 0, "parser": 0, "To": [0, 17, 51, 52, 62, 65], "run": [0, 21, 24, 25, 27, 30, 33, 34, 36, 38, 40, 41, 50, 53, 55, 57, 60, 63, 65, 67], "make": [0, 14, 52, 54, 62, 64], "clean": 0, "html": [0, 41, 42, 46], "thi": [1, 12, 14, 17, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 46, 47, 48, 50, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 65, 67, 69], "page": [1, 47, 64], "contain": [1, 16, 19, 33, 41, 42, 43, 44, 47, 54, 55, 60, 62, 67], "auto": [1, 17, 47, 61], "gener": [1, 12, 13, 14, 17, 19, 21, 31, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 58, 60, 61, 62, 65, 67], "document": [1, 17, 41, 42, 46, 47, 48, 68], "extend": [2, 5, 9, 54], "data": [2, 8, 12, 15, 17, 19, 21, 22, 24, 25, 27, 30, 35, 36, 37, 38, 41, 42, 43, 45, 50, 53, 55, 57, 63, 67], "rst": [2, 5, 8, 9], "obj": [3, 4, 6, 7, 8, 10, 19, 41, 42, 44], "displai": [3, 4, 6, 7, 8, 10, 55, 67], "py": [3, 4, 6, 7, 10], "type": [3, 4, 8, 10, 12, 13, 15, 19, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 52, 53, 56, 58, 61, 62, 67], "short_nam": [3, 6, 7, 8, 10], "arg": [3, 6, 7, 12, 13, 15, 24, 25, 27, 30, 32, 36, 41, 42], "endif": [3, 4, 6, 7, 8, 10], "return_annot": [3, 6, 7], "overload": [3, 6, 7], "length": [3, 8, 16, 31, 33, 34, 40, 41, 42, 44, 50, 53, 56, 62], "endfor": [3, 6, 7, 8, 10], "base": [3, 12, 14, 15, 21, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 37, 38, 41, 42, 43, 44, 50, 51, 52, 57, 58, 60, 61, 63, 68], "show": [3, 4, 8, 12, 41, 53], "inherit": [3, 19, 24, 25, 27, 30, 62], "autoapi_opt": [3, 8], "link_obj": 3, "loop": [3, 34, 56], "last": [3, 65], "diagram": [3, 43], "object": [3, 12, 15, 16, 17, 19, 21, 24, 25, 27, 30, 31, 34, 40, 41, 42, 44, 60, 62, 63], "autoapi": [3, 8, 68], "full_nam": 3, "part": [3, 12], "1": [3, 4, 8, 12, 13, 15, 16, 17, 19, 21, 25, 27, 30, 31, 32, 34, 36, 40, 41, 42, 44, 46, 52, 53, 54, 57, 58, 61, 62], "privat": [3, 17], "member": 3, "docstr": [3, 4, 6, 7, 8, 10], "indent": [3, 4, 6, 7, 8, 10], "3": [3, 4, 6, 7, 8, 10, 12, 14, 32, 33, 36, 40, 41, 42, 44, 52, 53, 54, 56, 62], "set": [3, 8, 14, 17, 28, 32, 33, 36, 38, 50, 52, 54, 58, 63, 65], "visible_class": [3, 8], "class": [3, 5, 8, 47, 60, 61, 62], "selectattr": [3, 8], "list": [3, 8, 12, 14, 15, 19, 25, 30, 33, 35, 36, 40, 41, 42, 43, 46, 56, 60, 62], "els": [3, 4, 7, 8], "rejectattr": [3, 8], "klass": [3, 8], "render": [3, 8, 43], "visible_properti": 3, "properti": [3, 6, 7, 10, 19, 22, 34, 38, 41, 44], "visible_attribut": [3, 8], "attribut": [3, 8, 14, 19, 31, 62], "visible_method": 3, "method": [3, 7, 17, 31, 34, 38, 42, 60, 61, 62], "name": [4, 8, 14, 19, 21, 25, 30, 33, 34, 36, 38, 41, 42, 44, 50, 53, 54, 55, 56, 58, 60, 62, 65, 67], "annot": [4, 10], "none": [4, 6, 7, 8, 12, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 53, 62], "valu": [4, 14, 17, 19, 21, 24, 25, 27, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, 46, 53, 60], "string": [4, 12, 14, 17, 25, 30, 33, 34, 38, 41], "splitlin": 4, "count": 4, "multilin": 4, "width": [4, 35, 36, 41, 44, 53], "8": [4, 41, 44, 53, 54, 56, 58, 65], "blank": [4, 55], "true": [4, 12, 13, 14, 15, 19, 24, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 53, 56, 58], "r": [4, 12, 21, 32, 40, 41, 42, 46, 54], "truncat": 4, "100": [4, 32, 40, 41, 44, 50, 53, 60, 62], "function": [6, 8, 17, 24, 36, 38, 50, 60, 62, 65, 69], "orphan": 8, "nest": 8, "pars": 8, "block": [8, 60], "subpackag": 8, "visible_subpackag": 8, "toctre": 8, "titlesonli": 8, "maxdepth": 8, "0": [8, 12, 13, 15, 16, 17, 18, 19, 21, 28, 32, 34, 35, 36, 40, 41, 42, 44, 53, 54, 56, 58, 60, 62], "index": 8, "endblock": 8, "submodul": 8, "visible_submodul": 8, "content": 8, "all": [8, 14, 17, 33, 34, 35, 40, 41, 42, 44, 50, 51, 53, 54, 55, 60, 61, 62, 63, 65, 67], "visible_children": 8, "children": 8, "elif": 8, "equalto": 8, "packag": [8, 42, 46, 48, 52, 53, 54, 60, 63], "import": [8, 12, 17, 41, 50, 53, 58, 60, 62, 65, 67], "titl": [8, 17, 36, 38, 41, 43], "visible_funct": 8, "modul": [8, 9, 41, 51, 54, 60, 65], "summari": [8, 41, 43, 55], "scope": 8, "id": [8, 14, 33, 34, 53], "obj_item": 8, "fullnam": 11, "escap": 11, "underlin": 11, "log": [12, 19, 21, 25, 34, 41, 45, 47, 56], "module_dir": [12, 33, 40], "calc_identifi": 12, "profil": [12, 16, 24, 40, 41, 42, 43, 44, 60, 61, 63], "find_longest_puls": 12, "sequenc": [12, 15, 19, 22, 25, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 47, 53, 54, 57, 58, 61, 63, 67], "find": [12, 17, 36, 53, 65], "longest": 12, "puls": [12, 15, 17, 19, 24, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 46, 47, 50, 53, 56, 57, 58, 60, 61, 63, 65, 67], "durat": [12, 60], "given": [12, 13, 15, 16, 17, 21, 31, 32, 33, 34, 38, 40, 41, 42, 54, 60, 67], "analyz": [12, 15, 41], "return": [12, 13, 14, 15, 16, 17, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 54, 60, 62], "float": [12, 13, 15, 16, 17, 19, 21, 31, 32, 34, 35, 36, 40, 41, 42, 44, 46], "microsecond": [12, 41, 46], "deeranalysi": [12, 41, 53], "dataset": [12, 13, 15, 16, 17, 19, 25, 27, 28, 31, 32, 34, 36, 37, 38, 40, 41, 47, 53, 60], "compact": [12, 41, 53], "model": [12, 13, 15, 21, 38, 41, 50, 56, 58, 63], "roi": [12, 41, 50, 53], "fals": [12, 15, 16, 17, 19, 31, 32, 33, 36, 41, 42, 44, 53, 56, 58, 62], "exp_typ": [12, 37, 41], "5pdeer": [12, 41, 50], "verbos": [12, 16, 19, 21, 34, 35, 41, 53], "kwarg": [12, 13, 15, 17, 19, 21, 24, 25, 27, 30, 31, 32, 34, 35, 36, 37, 41, 42, 44, 45], "background_func": 12, "t": [12, 17, 21, 35, 37, 38, 41, 42, 53, 55, 62, 65], "fit": [12, 13, 15, 16, 17, 40, 41, 43, 48, 50, 53, 56, 58, 60], "calc_correction_factor": 12, "fit_result": 12, "aim_mnr": 12, "25": [12, 13], "aim_tim": 12, "2": [12, 14, 16, 19, 25, 30, 31, 32, 33, 34, 36, 40, 41, 42, 44, 46, 53, 54, 56, 58, 61, 62], "deeranalysis_plot": [12, 41, 53], "background": [12, 31, 32, 34, 41, 53], "ax": [12, 13, 15, 16, 22, 41, 42, 53, 60, 62], "fig": [12, 13, 15, 16, 41], "text": [12, 14, 41, 43, 55], "figur": [12, 13, 15, 16, 17, 41, 43], "both": [12, 16, 17, 33, 36, 40, 41, 44, 50, 55, 57, 58, 60, 61, 62, 63, 65], "time": [12, 14, 15, 17, 21, 25, 27, 31, 34, 41, 42, 44, 50, 53, 54, 55, 58, 60, 61, 62, 65, 67], "domain": [12, 41, 42, 50, 60], "distanc": [12, 41, 50, 54, 57, 60], "along": [12, 17, 41, 55, 60], "extra": [12, 17, 34, 41, 52, 60, 62, 65], "infom": [12, 17, 32, 41, 56, 60, 61, 62, 67], "nois": [12, 15, 16, 17, 21, 41, 60], "ratio": [12, 13, 15, 21, 40, 41, 53], "mnr": [12, 41, 54], "region": [12, 41, 50, 65], "interest": [12, 41, 50, 59], "recommend": [12, 41, 52, 58, 61, 62, 69], "dipolar": [12, 41, 54], "evolut": [12, 41, 44, 54], "futur": [12, 41, 55, 63], "experi": [12, 13, 15, 17, 19, 21, 25, 27, 31, 32, 33, 34, 36, 37, 38, 40, 41, 44, 45, 52, 53, 56, 57, 60, 62, 63, 65], "upon": [12, 19, 35, 41, 42, 61], "paramet": [12, 13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 53, 55, 57, 62, 63, 65, 67, 69], "deerlab": [12, 17, 21, 41, 43, 50, 51, 56, 57], "fitresult": [12, 25, 27, 28, 41, 43], "_description_": [12, 13, 15, 17, 21, 25, 30, 33, 34, 35, 36, 40, 41, 44, 45, 46], "bool": [12, 13, 15, 17, 19, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44], "should": [12, 17, 19, 21, 33, 40, 41, 45, 50, 52, 53, 55, 61, 65, 67], "plot": [12, 13, 15, 16, 17, 32, 41, 42, 43, 44, 53, 60], "tupl": [12, 16, 17, 24, 25, 27, 30, 33, 41], "option": [12, 13, 14, 15, 16, 17, 19, 21, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 62, 67], "minimum": [12, 41, 61], "maximum": [12, 13, 15, 32, 35, 40, 41, 44, 50, 55, 65, 67], "default": [12, 13, 14, 15, 16, 17, 19, 21, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 52, 53, 56, 60, 65], "A": [12, 13, 17, 19, 21, 31, 32, 33, 34, 37, 40, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56, 57, 60, 61, 62, 65, 67], "matplotlib": [12, 13, 15, 16, 17, 41, 53], "deeranalysis_plot_pub": [12, 41], "result": [12, 14, 24, 25, 27, 30, 41, 43, 67], "vertic": [12, 41], "deer": [12, 17, 21, 40, 41, 43, 44, 48, 55, 57, 58, 63, 67], "analysi": [12, 13, 14, 15, 16, 21, 41, 42, 43, 46, 57, 63], "readi": [12, 41], "public": [12, 41], "If": [12, 14, 15, 16, 17, 19, 31, 32, 33, 34, 35, 36, 41, 42, 44, 50, 54, 60, 67], "new": [12, 33, 36, 41, 48, 52, 57, 62, 64], "creat": [12, 13, 14, 15, 17, 19, 25, 27, 31, 32, 34, 41, 42, 43, 44, 46, 54, 60, 65], "identifyroi": [12, 41], "p": [12, 41, 44, 54, 60], "criterion": [12, 19, 41], "99": [12, 41], "gauss": [12, 31, 34, 36, 41, 44, 53], "identifi": [12, 36, 38, 41, 50, 65], "two": [12, 14, 16, 19, 33, 41, 42, 54, 58, 61, 62, 65, 69], "ar": [12, 14, 17, 24, 25, 27, 30, 32, 33, 35, 41, 42, 44, 46, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 67, 69], "sypport": [12, 41], "gaussian": [12, 41, 42], "intergr": [12, 41], "int": [12, 13, 15, 16, 17, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 44], "np": [12, 13, 16, 19, 35, 41, 42, 44, 53, 62], "ndarrai": [12, 13, 16, 19, 35, 41, 42, 44, 46], "distribut": [12, 41, 50, 60], "axi": [12, 13, 16, 17, 19, 33, 41, 42, 44, 46, 53, 62], "fraction": [12, 41], "must": [12, 13, 16, 41, 50, 53, 55, 58, 60, 65, 67], "str": [12, 13, 14, 15, 17, 19, 21, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46], "calcul": [12, 13, 15, 16, 17, 36, 41, 44, 50, 53, 55, 65], "numpi": [12, 13, 35, 41, 46, 53, 58, 62], "remove_echo": 12, "vre": 12, "vim": 12, "loc": 12, "criteria": [12, 19, 33, 41, 47, 53, 60, 63], "4": [12, 17, 21, 40, 41, 44, 53, 56, 65], "extent": 12, "remov": [12, 42, 62], "cross": 12, "echo": [12, 17, 32, 40, 41, 43, 44, 50, 52, 53, 54, 60, 62], "real": [12, 32, 40], "phase": [12, 17, 32, 33, 37, 40, 41, 42, 44, 53, 62], "correct": [12, 32, 36, 54, 60], "signal": [12, 14, 15, 17, 21, 24, 25, 27, 30, 41, 50, 54, 60], "imaginari": [12, 32, 40], "approxim": [12, 40, 50], "locat": [12, 50], "30": [12, 13, 21, 32, 40, 41, 53, 60], "point": [12, 13, 17, 40, 41, 42, 44, 65], "delat": 12, "multipl": [12, 16, 41, 51, 52, 54, 57, 60, 63, 65], "std": [12, 17], "deviat": [12, 17], "how": [12, 14, 17, 19, 21, 32, 34, 41, 50, 52, 53, 61, 62, 65], "mani": [12, 17, 32, 34, 54, 60, 61, 62], "either": [12, 13, 14, 15, 32, 34, 40, 41, 44, 48, 50, 60, 63, 65, 67], "side": [12, 55, 62], "mask": [12, 35], "ignor": 12, "shift_pulse_freq": 12, "shift": [12, 68], "frequenc": [12, 13, 16, 31, 34, 36, 40, 41, 42, 44, 50, 53, 54, 55, 56, 58, 61, 62], "amount": 12, "whose": 12, "which": [12, 14, 16, 17, 21, 41, 44, 50, 52, 54, 55, 60, 61, 62], "normalise_01": [12, 41], "normal": [12, 17, 34, 41, 44, 53, 54, 57, 60], "input": [12, 17, 33, 41, 55], "vector": [12, 41], "between": [12, 16, 40, 41, 44, 52, 53, 54, 57, 58, 60, 62], "resample_and_shift_vector": 12, "f": [12, 14, 21, 41], "resampl": 12, "origin": [12, 51, 54, 63], "build__lowpass_butter_filt": 12, "cutoff": [12, 41], "build": [12, 13, 41, 42, 44, 48, 54, 58, 61, 62, 65], "lowpass": 12, "butterworth": 12, "filter": [12, 14, 35, 41], "ghz": [12, 13, 16, 31, 34, 36, 40, 41, 44, 53, 56, 58, 62], "f_axi": 12, "fieldsweep": [12, 16, 27, 41, 44, 47, 53], "b": [12, 13, 31, 32, 33, 34, 37, 41, 42, 44, 53, 54, 60, 62], "a_shift": 12, "b_shift": 12, "optimis": [12, 32, 40, 41, 43, 48, 53, 54, 57], "posit": [12, 19, 31, 32, 33, 34, 36, 40, 41, 42, 44, 62], "field": [12, 13, 31, 32, 34, 36, 40, 41, 43, 44, 50, 55, 62, 63, 65], "sweep": [12, 13, 31, 32, 36, 38, 40, 41, 43, 44, 50, 60, 63], "ad": [12, 14, 15, 19, 31, 32, 35, 37, 41, 42, 43, 44, 53, 54, 57, 60, 62, 65, 68], "fieldsweepanalysi": [12, 13, 16, 41, 43, 53], "pump": [12, 41, 44, 50, 53, 54], "effect": [12, 36, 38, 54], "excit": [12, 41, 42, 53, 54, 57, 62], "applic": [12, 14, 25, 30, 41], "exciat": [12, 42], "_type_": [12, 17, 19, 21, 25, 30, 33, 34, 40, 41, 42, 44], "optimise_puls": [12, 25, 27, 41], "pump_puls": [12, 41, 53, 54], "exc_puls": [12, 41, 53, 54], "ref_puls": [12, 41, 53, 54], "brute": [12, 41], "ndeer": [12, 41, 44, 57], "num_ref_puls": [12, 41], "full_output": [12, 41], "maximis": [12, 32, 40, 41], "exc": [12, 41], "overlap": [12, 16, 41, 43], "refocus": [12, 17, 40, 41, 44, 50, 54], "number": [12, 13, 14, 15, 16, 17, 19, 31, 32, 33, 34, 36, 38, 40, 41, 42, 44, 46, 53, 54, 60], "match": [12, 35, 41], "perform": [12, 41, 53, 61], "each": [12, 19, 32, 33, 41, 42, 46, 60, 62, 65, 69], "best": [12, 41], "what": [12, 41, 50, 51, 53, 61, 65], "search": [12, 38, 41], "grid": [12, 41], "an": [12, 14, 15, 17, 19, 25, 30, 31, 32, 33, 34, 38, 41, 42, 44, 48, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65], "sequr": [12, 41], "total": [12, 15, 17, 41, 42, 44, 53, 54], "plot_overlap": [12, 41], "respro": [12, 41, 43, 47, 53], "well": [12, 41, 48, 53, 55, 62], "resonatorprofileanalysi": [12, 16, 41, 43, 53], "reson": [12, 16, 24, 41, 42, 43, 44, 46, 54, 55, 56, 57, 60, 61, 63], "includ": [12, 13, 17, 33, 41, 50, 54, 56, 57, 62, 67], "create_nmodel": 13, "mwfreq": 13, "nitroxid": [13, 50], "spin": [13, 41, 46, 53, 54, 57], "system": [13, 14, 21, 41, 50, 52, 57, 63, 65], "microwav": [13, 36], "mhz": [13, 36, 42], "xarrai": [13, 16, 41, 45], "dataarrai": [13, 15, 41, 45], "find_max": [13, 41], "max": [13, 38, 41, 55, 56, 58], "calc_gyro": [13, 41, 53], "lo": [13, 16, 24, 31, 32, 34, 37, 41, 44, 53, 54, 60, 61, 62], "gyromagnet": [13, 40, 41, 53], "det_frq": [13, 40, 41], "detect": [13, 15, 34, 36, 38, 41, 42, 43, 50, 53, 62, 65], "g": [13, 14, 40, 41, 42, 54, 60], "calc_noise_level": [13, 41], "snr_target": [13, 15, 21, 41, 53], "spintyp": [13, 41], "n": [13, 15, 19, 31, 34, 41, 42, 44, 50, 53, 56, 58], "norm": [13, 15, 17, 41], "nomarlis": [13, 41], "freq": [13, 32, 36, 37, 41, 42, 53, 56, 58, 60, 62], "spinsystem": 13, "espin": 13, "nspin": 13, "erot": 13, "passiv": 13, "rotat": 13, "matrix": [13, 41, 46], "eyekron": 13, "m": [13, 21, 41, 51, 58], "kroneck": 13, "product": 13, "ident": 13, "multipli": [13, 62], "kroney": 13, "comput": [13, 14, 21, 41, 42, 52, 58], "same": [13, 54], "size": [13, 15, 41, 43, 50], "ham": 13, "elspin": 13, "nucspin": 13, "ham_ez": 13, "ham_nz": 13, "resfield": 13, "orient": 13, "computeintens": 13, "rejectionratio": 13, "1e": [13, 53, 56], "08": [13, 53], "rang": [13, 31, 34, 50, 55, 57], "100000000": 13, "threshold": [13, 15, 16, 17, 41, 53, 60], "computefreq2field": 13, "build_spectrum": 13, "knot": 13, "19": [13, 52, 54], "npoint": 13, "1000": [13, 16, 24, 41, 42, 53, 54], "guass_broaden": 13, "spectrum": [13, 50], "": [13, 14, 19, 34, 42, 50, 56], "gn": 13, "mt": 13, "averag": [13, 15, 24, 34, 41, 44, 53, 54, 60, 62], "xaxi": 13, "y": [13, 17, 32, 40, 41, 42, 44, 46, 52, 53, 54, 56, 58], "intens": 13, "normalis": [13, 15, 17, 21, 22, 41], "dictformat": 14, "fmt": 14, "datefmt": 14, "style": [14, 34, 35, 43, 60], "valid": 14, "formatt": 14, "instanc": [14, 38, 62], "convert": [14, 33, 40, 41, 43, 44, 46, 58, 61, 62], "logrecord": 14, "need": [14, 17, 31, 32, 33, 34, 38, 50, 51, 52, 54, 55, 56, 58, 60, 61, 62, 63, 65, 67], "know": [14, 50], "construct": 14, "thei": [14, 16, 17, 41, 50, 54, 60, 62, 63], "respons": [14, 50, 52], "usual": 14, "can": [14, 17, 19, 31, 32, 33, 36, 38, 40, 42, 48, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 65, 67, 69], "interpret": [14, 34], "human": [14, 58], "extern": 14, "allow": [14, 38, 50, 53, 54, 55, 57, 60, 61, 62, 69], "format": [14, 55, 56, 65], "specifi": [14, 17, 41, 42, 44, 50, 54, 56, 60, 67], "suppli": [14, 24, 25, 27, 30, 33], "depend": [14, 41, 44, 51, 52, 54, 61, 62], "messag": [14, 25, 27], "initi": [14, 19, 31, 32, 41, 43, 53, 54, 55, 56, 61, 62, 65, 68], "knowledg": 14, "e": [14, 17, 33, 34, 40, 41, 42, 44, 46, 51, 54, 58, 60, 62, 65], "mention": 14, "abov": [14, 16, 17, 41, 44, 51, 54, 62], "fact": 14, "user": [14, 17, 48, 53, 55, 56, 57, 60, 63, 65, 67, 68, 69], "argument": [14, 24, 25, 27, 30, 42, 60], "pre": [14, 52, 54, 62], "current": [14, 15, 33, 34, 36, 38, 41, 44, 51, 54, 55, 58, 61, 63], "describ": [14, 15, 41, 44, 62], "logger": 14, "channel": [14, 32, 33, 36, 40, 56, 58, 65], "levelno": 14, "numer": 14, "level": [14, 15, 17, 19, 24, 41, 62], "debug": [14, 56, 65], "info": [14, 56, 65], "warn": [14, 17, 42, 65], "error": [14, 19, 24, 25, 27, 30, 65], "critic": [14, 65], "levelnam": 14, "pathnam": 14, "full": [14, 17, 33, 36, 38, 50, 52, 60, 61, 62, 63], "file": [14, 17, 19, 31, 32, 33, 34, 35, 36, 41, 42, 44, 45, 55, 60, 63, 65, 67], "where": [14, 41, 44, 50, 54, 60], "call": [14, 34, 54, 62, 69], "wa": [14, 17, 52, 54, 63, 65], "issu": [14, 34, 52, 61, 64, 65], "avail": [14, 24, 25, 27, 30, 60], "filenam": [14, 19, 25, 27, 41, 42, 44], "portion": 14, "lineno": 14, "d": [14, 21, 33, 41, 46], "line": 14, "funcnam": 14, "when": [14, 50, 51, 53, 57, 58, 60, 61, 62, 65], "asctim": 14, "textual": 14, "msec": 14, "millisecond": 14, "creation": 14, "relativecr": 14, "rel": [14, 33], "load": [14, 17, 19, 35, 41, 42, 44, 45, 55, 60, 67], "typic": 14, "startup": 14, "thread": [14, 24, 25, 27, 30, 31, 32], "threadnam": 14, "process": [14, 17, 24, 25, 27, 30, 48, 55, 57, 60, 63, 69], "record": [14, 65], "getmessag": 14, "just": [14, 16, 33, 41, 53, 61, 62], "emit": 14, "special": [14, 61], "date": [14, 51, 52, 63, 65], "omit": 14, "you": [14, 41, 44, 51, 52, 54, 55, 58, 59, 60, 61, 62, 64, 65, 67], "get": [14, 34, 36, 62, 64, 65], "iso8601": 14, "like": [14, 41, 44, 53, 54, 61, 62, 63, 65], "rfc": 14, "3339": 14, "want": [14, 52, 53, 60, 62], "one": [14, 16, 34, 41, 54, 60, 62, 63, 65], "templat": 14, "your": [14, 53, 55, 58, 61, 64], "chang": [14, 33, 34, 36, 38, 54, 58, 60, 62, 63, 64, 65], "version": [14, 35, 41, 45, 51, 52, 53, 58], "dictionari": [14, 33, 34, 40, 41, 42, 43, 46, 60, 62], "operand": 14, "oper": [14, 34, 41, 46, 52], "yield": 14, "befor": [14, 19, 50, 52, 53, 54, 58, 60, 61, 65, 67], "coupl": [14, 61], "preparatori": 14, "step": [14, 15, 17, 33, 36, 38, 40, 41, 44, 46, 52, 53, 54, 57, 62], "carri": [14, 50], "out": [14, 17, 25, 27, 50, 52, 62, 64], "determin": [14, 50, 57], "usestim": 14, "formattim": 14, "event": [14, 42, 53, 62], "except": [14, 17, 55, 65], "inform": [14, 60, 61, 62], "formatexcept": 14, "append": 14, "qtloghandl": 14, "notset": 14, "pyqt6": [14, 24, 25, 26, 28, 30], "qtcore": [14, 24, 25, 27, 30], "qobject": [14, 24, 25, 27, 30], "handler": [14, 24, 25, 27, 30], "dispatch": 14, "specif": [14, 19, 21, 34, 36, 38, 41, 52, 55, 57, 58, 60, 61, 62, 63, 67], "destin": 14, "act": 14, "placehold": 14, "defin": [14, 21, 24, 25, 27, 30, 41, 53, 62], "interfac": [14, 19, 24, 31, 32, 34, 37, 48, 50, 56, 60, 62, 68, 69], "desir": 14, "By": [14, 19, 41, 44], "case": [14, 17, 52], "raw": 14, "basic": [14, 54, 60, 61, 65], "empti": 14, "do": [14, 51, 52, 53, 58, 61, 62], "whatev": 14, "take": [14, 34, 36, 38, 42, 52, 53, 62, 67], "actual": [14, 38, 60], "intend": 14, "implement": [14, 57, 62], "subclass": [14, 21, 41, 61], "so": [14, 16, 17, 41, 42, 50, 53, 58, 60, 62, 65], "rais": [14, 19, 25, 30, 33, 41, 42, 44, 45], "notimplementederror": 14, "setup_log": [14, 65], "folder": [14, 55, 65, 67], "command": [14, 32, 36, 54, 62], "setup": [14, 24, 25, 27, 30, 31, 32, 40, 50, 60, 65], "wide": [14, 55, 57], "core": [14, 16, 27, 28, 41, 56, 65], "harwar": [14, 65], "hardwar": [14, 41, 47, 51, 53, 57, 58, 60, 63, 65], "everyth": [14, 65], "releat": 14, "whilst": [14, 36, 38, 54, 57, 58, 60, 63], "relat": [14, 65], "change_log_level": 14, "carrpurcellanalysi": [15, 41, 53, 60], "carr": [15, 41, 44, 50, 54], "purcel": [15, 41, 44, 50, 54], "decai": [15, 17, 41, 50], "mono": [15, 41], "experiment": [15, 41, 42, 44, 60, 63], "cp": [15, 41, 50], "doubl": [15, 41, 54, 57], "exponenti": [15, 41], "avali": [15, 41, 50], "check_decai": [15, 41], "05": [15, 16, 41], "check": [15, 17, 21, 33, 41, 42, 44, 52, 54, 60, 65], "ha": [15, 19, 25, 27, 34, 36, 38, 41, 50, 52, 53, 55, 57, 58, 60, 61, 65], "5": [15, 16, 17, 34, 40, 41, 43, 44, 53, 55, 56, 58], "lenght": [15, 41], "find_optim": [15, 41, 53], "target_tim": [15, 41, 53], "target_step": [15, 41, 53], "optim": [15, 17, 32, 40, 41, 50], "inter": [15, 41, 42, 50, 54, 57, 67], "delai": [15, 17, 33, 41, 42, 44, 50, 53, 54, 57, 62, 67], "measur": [15, 17, 19, 21, 31, 32, 37, 40, 41, 44, 50, 54, 55, 57, 58, 60, 61, 63, 67], "target": [15, 17, 32, 40, 41], "hour": [15, 41, 50], "target_shrt": [15, 41, 53], "shot": [15, 17, 24, 31, 34, 37, 41, 44, 50, 53, 54, 60, 62], "repettit": [15, 41], "second": [15, 16, 21, 41, 44, 54], "taken": [15, 41], "u": [15, 17, 19, 31, 34, 41, 44, 53, 54, 59], "reptimeanalysi": [15, 41], "reptim": [15, 24, 31, 34, 37, 41, 44, 53, 54, 60, 62], "satur": [15, 41], "recoveri": [15, 41, 50], "calc_optimal_reptim": [15, 41], "9": [15, 41, 52, 53], "detect_eseem": [15, 41], "deuteron": [15, 41, 44], "eseem": [15, 41, 44], "xr": [15, 16, 41], "proton": [15, 41, 44, 54], "snr": [15, 17, 21, 22, 25, 30, 41, 50, 54, 60], "cmap": [15, 17, 41], "d95b6f": [15, 20, 41], "42a399": [15, 20, 41], "plot_1drelax": [15, 41], "superimpos": [15, 41], "1d": [15, 41], "color": [15, 41, 47], "map": [15, 41], "f_lim": [16, 41], "32": [16, 41, 44, 53, 54, 62], "36": [16, 41, 53], "nutat": [16, 40, 41, 44, 50, 60], "It": [16, 34, 41, 48, 50, 53, 54, 55, 62, 63, 65, 67], "have": [16, 38, 41, 50, 52, 53, 54, 58, 60, 62, 63, 65], "pulse0_tp": [16, 41], "limit": [16, 41, 62], "33": [16, 41, 53, 56, 58], "35": [16, 41, 56, 58], "process_nut": [16, 41, 53], "noisedens": [16, 41], "nfft": [16, 41], "power": [16, 40, 41, 50, 56, 60, 62, 65], "seri": [16, 21, 41, 50], "extract": [16, 38, 41, 54], "first": [16, 19, 34, 41, 44, 50, 52, 53, 54, 55, 60, 65, 67], "trace": [16, 41, 44], "assum": [16, 17, 41], "far": [16, 41, 62], "off": [16, 41, 65], "fft": [16, 22, 41], "zero": [16, 41, 42, 44, 62], "pad": [16, 41, 42], "requr": [16, 41], "singl": [16, 31, 34, 35, 41, 54, 61, 62, 63, 67], "exclud": [16, 41], "prof_data": [16, 41], "give": [16, 33, 41, 50, 54, 57, 61], "prof_frq": [16, 41], "_process_fit": [16, 41], "r_limit": [16, 41], "f_diff_threshold": [16, 41], "multi_mod": [16, 41], "fc_guess": [16, 41], "34": [16, 41, 53, 56, 60, 62], "sum": [16, 41, 42, 44], "lorentzian": [16, 41], "differ": [16, 19, 41, 52, 54, 58, 60, 63, 65], "peak": [16, 41], "merg": [16, 41], "03": [16, 41, 56, 58], "overlai": [16, 41], "provid": [16, 38, 41, 50, 51, 53, 61, 69], "ceil": 16, "decim": 16, "floor": 16, "calc_overlap": 16, "x": [16, 17, 32, 40, 41, 42, 44, 46, 53, 54, 56, 58], "func1": 16, "func2": 16, "calcuat": [16, 33], "bspline_extra": 16, "tck_": 16, "optimise_spectra_posit": [16, 41], "resonator_profil": [16, 41, 53], "twodexperimentanalysi": 17, "2d": [17, 33, 36, 38, 41, 44, 50], "decoher": 17, "bruker": [17, 31, 32, 33, 34, 38, 51, 52, 56, 57, 60, 63, 67, 68], "dsc": 17, "paremet": [17, 38], "csv": 17, "txt": 17, "ani": [17, 19, 34, 36, 38, 51, 52, 55, 65], "requir": [17, 36, 38, 41, 44, 50, 52, 55, 58, 60, 61, 62, 65, 67], "metadata": 17, "path": [17, 19, 31, 32, 33, 36, 38, 41, 42, 44, 45, 46, 52, 55, 58], "datafil": 17, "import_data": 17, "scan": [17, 35, 36, 38, 40, 41, 44, 53, 60], "shrt": 17, "directli": [17, 19, 21, 41, 58], "variabl": [17, 32, 33, 36, 38, 42, 62], "arrai": [17, 33, 42], "timex": 17, "timei": 17, "done": [17, 33, 36, 38, 52, 54, 55, 58, 60, 61, 62, 63, 67], "per": [17, 36, 38, 41, 44, 53, 65], "repetit": [17, 41, 44, 50, 53, 62], "import_dataset": 17, "create_bahrenberg_plot": 17, "standard": [17, 32, 40, 60, 62, 65], "bahrenberg": 17, "_stability_check": 17, "caclul": 17, "snr_threshold": 17, "complet": [17, 48, 50, 52, 55, 56, 58, 60, 67], "wee": 17, "bit": [17, 56, 58], "more": [17, 33, 34, 48, 52, 53, 54, 60, 61, 65], "nuanc": 17, "detail": [17, 40, 50, 60, 69], "calculate_optim": 17, "pair": [17, 32, 53], "calculate_snr_threshold": 17, "quick": 17, "script": [17, 32, 36, 38, 40, 57, 61, 62, 65], "set_snr_threshold": 17, "set_snr_target": 17, "set_time_target": 17, "estimated_snr": 17, "exp": [17, 33], "snr_normal": 17, "cannot": [17, 19, 41, 42, 44], "through": [17, 24, 25, 27, 30, 33, 36, 54, 57, 61], "prefer": [17, 55, 56, 58, 67], "over": [17, 53, 54], "16": [17, 24, 32, 40, 41, 42, 44, 50, 53, 54, 56, 62], "cycl": [17, 33, 41, 42, 44, 53, 62], "appli": [17, 32, 50, 57], "paramat": [17, 60, 62], "total_shot": 17, "doesn": 17, "updat": [17, 52, 67, 68], "main": [17, 25, 41, 47, 51, 60, 61, 62, 64, 65, 69], "calculate_noise_level": 17, "top": [17, 41, 43, 55], "right": [17, 41, 43, 55], "hand": [17, 55], "corner": [17, 55], "veri": [17, 48, 58], "long": [17, 21, 34, 41, 52, 54], "stabl": [17, 36], "enough": 17, "thrown": 17, "create_twod_plot": 17, "contour": 17, "There": [17, 36, 53, 57, 60, 62, 64, 65, 69], "parmet": 17, "dictat": 17, "some": [17, 34, 50, 52, 65], "possibl": [17, 33, 50, 60, 62, 63, 64], "output": 17, "mai": 17, "automat": [17, 57, 60, 67], "fill": [17, 62, 64], "deerload": 17, "tau2": [17, 21, 40, 41, 44, 53, 54], "snrpshot": 17, "4puls": 17, "5puls": 17, "keyword": [17, 24, 25, 27, 30, 42], "particular": 17, "colormap": 17, "subplot": 17, "create_slice_plot": 17, "slice": 17, "direct": [17, 42], "constant": [17, 19, 33], "tau1": [17, 21, 40, 41, 44, 53, 54], "due": [17, 61], "vari": [17, 19, 50], "space": [17, 42], "closest": 17, "optimal_slice_plot": 17, "invert_sign": 17, "invert": 17, "useful": 17, "samepl": 17, "pi": [17, 31, 34, 40, 53, 54, 60, 62], "align": 17, "hahn": [17, 32, 40, 41, 44, 50, 60, 62], "_data_transpos": 17, "intern": 17, "flip": [17, 42], "diagnal": 17, "value_at_po": 17, "po": 17, "coordin": 17, "nome": 17, "select": [17, 41, 44, 55, 57, 60, 65], "value_at_tim": 17, "__version__": [18, 41], "7": [18, 41, 44, 53], "repres": [19, 31, 32, 34, 37, 41, 42, 44, 58], "connect": [19, 31, 32, 34, 36, 37, 53, 61, 65], "autoepr": [19, 37, 48, 54, 60, 61, 62], "spectromet": [19, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 48, 52, 53, 56, 57, 58, 60, 61, 62, 63], "acquire_dataset": [19, 31, 32, 34, 36, 37, 53, 60], "acquir": [19, 31, 32, 34, 36, 37, 38, 60], "launch": [19, 31, 32, 34, 37, 53, 60], "savenam": [19, 31, 32, 34, 37, 53, 60], "initialis": [19, 24, 25, 27, 30, 31, 32, 37, 53], "autosav": [19, 31, 32, 37, 65], "timestamp": [19, 31, 32, 37], "isrun": [19, 31, 32, 34, 37, 53], "termin": [19, 21, 31, 32, 34, 37, 41, 60], "immedi": [19, 31, 32, 37, 60, 65], "terminate_at": [19, 53, 60], "test_interv": [19, 60], "keep_run": 19, "condit": 19, "being": [19, 34, 50, 62], "satisifi": 19, "test": [19, 21, 41, 48, 52, 60], "often": [19, 52, 54, 61, 62, 65, 69], "minut": [19, 60], "10": [19, 53, 56, 60], "finish": [19, 21, 24, 25, 27, 30, 36, 38, 41, 55], "met": 19, "unit": [19, 53, 57, 63], "descript": [19, 21, 41, 53, 54], "virtual": 19, "eith": 19, "static": [19, 41, 42, 44, 53, 62], "leav": 19, "unitless": [19, 56], "brief": 19, "intial": 19, "dynam": [19, 41, 44, 52, 60], "dimension": 19, "ax_id": 19, "paramt": [19, 38], "onli": [19, 21, 31, 32, 33, 34, 35, 36, 41, 44, 50, 51, 54, 58, 60, 62, 63, 65], "other": [19, 54, 62, 63, 67], "itself": [19, 63], "pass": [19, 24, 25, 27, 30, 60, 62, 65], "never": [19, 65], "exampl": [19, 51, 53, 58, 60, 62], "par1": 19, "arang": [19, 62], "axis_id": [19, 62], "par2": 19, "progress": [19, 24, 25, 27, 30, 34, 41, 44, 45, 48, 53, 57, 62, 67], "prog": [19, 53], "dict": [19, 22, 24, 25, 26, 30, 33, 34, 35, 40, 41, 42, 43], "program": [19, 48, 54, 55, 65, 69], "element": [19, 34, 58, 60], "dim": [19, 32, 33, 41, 44, 53], "add_axi": 19, "get_axi": 19, "remove_dynam": 19, "is_stat": [19, 42], "__eq__": 19, "__o": [19, 21, 41], "self": [19, 33, 41, 42, 44, 62, 69], "__add__": [19, 21, 41], "__sub__": 19, "__mul__": 19, "__rmul__": 19, "copi": [19, 41, 42, 44], "_to_dict": [19, 41, 42, 44], "_to_json": [19, 41, 42, 44], "save": [19, 22, 32, 33, 34, 36, 38, 41, 42, 44, 55, 65, 67], "json": [19, 41, 42, 44], "typeerror": [19, 41, 42, 44], "serial": [19, 41, 42, 44], "_from_dict": [19, 41, 42, 44], "classmethod": [19, 41, 42, 44], "_from_json": [19, 41, 42, 44], "jsonstr": [19, 41, 42, 44], "filenotfounderror": [19, 41, 42, 44], "doe": [19, 34, 41, 42, 44, 55, 61], "exist": [19, 41, 42, 44, 51, 57, 63], "primary_color": [20, 41], "e1ae38": [20, 41], "reim_color": 20, "d61b00": 20, "00bbd6": 20, "shade_color": 20, "end_sign": [21, 41], "timecriteria": [21, 41], "end_tim": [21, 41], "absolut": [21, 41], "local": [21, 31, 34, 41, 52, 53, 56, 58], "continu": [21, 41, 52], "sinc": [21, 41, 42, 58, 62, 65], "epoch": [21, 41], "snrcriteria": [21, 41, 60], "estim": [21, 31, 32, 41, 44, 53, 67], "work": [21, 34, 36, 38, 41, 44, 48, 50, 60, 61, 63, 67], "stoher": [21, 41], "et": [21, 41, 54], "al": [21, 41, 54], "mimimum": [21, 41], "refer": [21, 55], "stoehr": [21, 41], "white": [21, 41], "smith": [21, 41], "kamp": [21, 41], "thompson": [21, 41], "durand": [21, 41], "w": [21, 41, 56], "freudl": [21, 41], "fraquelli": [21, 41], "j": [21, 41, 42, 46, 54], "haas": [21, 41], "hook": [21, 41], "kimbal": [21, 41], "kummel": [21, 41], "k": [21, 41], "levai": [21, 41], "lombardi": [21, 41], "micol": [21, 41], "roger": [21, 41], "dersnr": [21, 41], "simpl": [21, 41, 55, 56, 57, 58, 60, 62], "spectroscop": [21, 41], "algorithm": [21, 41, 68], "astronom": [21, 41], "softwar": [21, 35, 41, 42, 46, 48, 52, 57, 65], "xvii": [21, 41], "asp": [21, 41], "confer": [21, 41], "vol": [21, 41], "2008": [21, 41], "p5": [21, 33, 41], "deercriteria": [21, 41, 53], "mode": [21, 31, 34, 36, 37, 41, 51, 53, 57, 60], "speed": [21, 34, 41, 53, 54], "update_func": [21, 28, 41], "tau3": [21, 41, 44, 53, 54], "get_all_ax": [22, 41], "get_all_fixed_param": [22, 41], "create_dataset_from_sequ": [22, 41], "extra_param": [22, 41], "create_dataset_from_ax": [22, 41], "param": [22, 25, 30, 37, 41, 44, 46], "axes_label": [22, 41], "create_dataset_from_bruk": [22, 41], "filepath": [22, 33, 41, 43], "epraccessor": [22, 41], "xarray_obj": [22, 41], "correctphas": [22, 41], "correctphaseful": [22, 41], "app": [23, 27, 28], "window": [23, 42], "autodeersign": 24, "worker": [24, 25, 27, 30], "thre": 24, "support": [24, 25, 27, 30, 42, 52, 54, 57, 60, 61, 63, 68], "No": [24, 25, 27, 30, 32, 62], "exctyp": [24, 25, 27, 30], "traceback": [24, 25, 27, 30], "format_exc": [24, 25, 27, 30], "anyth": [24, 25, 27, 30, 48, 52, 65], "indic": [24, 25, 27, 30, 55], "statu": [24, 55, 67], "fsweep_result": 24, "respro_result": 24, "relax_result": 24, "t2_result": 24, "quickdeer_result": 24, "longdeer_result": 24, "quickdeer_upd": 24, "longdeer_upd": 24, "reptime_scan_result": 24, "timeout": [24, 25, 27], "autodeerwork": 24, "wait": [24, 36], "mutex": 24, "gyro": [24, 34, 40], "awg": [24, 31, 33, 34, 42, 50, 53, 54, 56, 57, 58, 61, 62, 63, 65, 68], "user_input": 24, "qrunnabl": [24, 25, 27, 30], "wrap": [24, 25, 27, 30, 43], "up": [24, 25, 27, 30, 54, 62, 63, 65], "callback": [24, 25, 27, 30], "runner": [24, 25, 27, 30], "qwaitcondit": 24, "qmutex": 24, "pause_and_wait": 24, "run_fsweep": 24, "run_respro": 24, "run_cp_relax": 24, "dt": [24, 40, 41, 44, 50, 53, 54, 56, 58], "200": [24, 36, 40, 41, 44, 53, 62], "relax": [24, 41, 43, 44, 47, 54], "run_t2_relax": 24, "60": 24, "run_2d_relax": 24, "run_quick_d": 24, "run_long_d": 24, "run_deer": 24, "end_criteria": 24, "50": [24, 40, 41, 44, 53, 54], "run_reptime_opt": 24, "tune_puls": [24, 31, 32, 34, 37, 53, 60], "new_data": 24, "new_puls": [24, 62], "update_lo": 24, "update_reptim": [24, 25, 27], "update_gyro": 24, "update_deerset": 24, "deer_set": 24, "stop": [24, 34, 36, 38, 65], "set_noise_mod": 24, "__main__": [25, 41, 47], "autodeer_work": [25, 41, 47], "quickdeer": [25, 41, 47], "test_main": [25, 41, 47], "tool": [25, 27, 34, 41, 47, 56], "autodeerui": [25, 27], "qmainwindow": [25, 27], "set_spectrometer_connected_light": [25, 27], "state": [25, 27, 36, 41, 44, 65], "load_fold": [25, 27], "load_epr_fil": [25, 27, 30], "store_loc": [25, 27, 30], "load_spectrometer_config": [25, 27], "select_reson": [25, 27], "change_lo": [25, 27], "connect_spectromet": [25, 27], "raise_warn": [25, 27], "save_data": [25, 27], "fsweep_toolbar": [25, 27], "respro_toolbar": [25, 27], "relax_toolbar": [25, 27], "update_fieldsweep": [25, 27], "create_fieldsweep_figur": [25, 27], "refresh_fieldsweep_after_fit": [25, 27], "update_respro": [25, 27], "create_respro_figur": [25, 27], "refresh_respro": [25, 27], "optimise_pulses_button": [25, 27], "update_optimise_pulses_figur": [25, 27], "update_relax": [25, 27], "create_relax_figur": [25, 27], "refresh_relax_figur": [25, 27], "refresh_relax": [25, 27], "update_t2": [25, 27], "check_t2": [25, 27], "check_cp": [25, 27], "refresh_t2": [25, 27], "advanced_mode_input": [25, 27], "update_quickd": [25, 27], "update_longd": [25, 27], "pop": [25, 27, 65], "box": [25, 27, 30, 55], "runfullyautod": [25, 27], "runadvanedautod": [25, 27], "create_report": [25, 27, 43], "getcistr": [25, 30], "uncert": [25, 30], "precis": [25, 30, 36, 53, 57], "get_sequence_row": [25, 30], "fill_tabl": [25, 30], "tabl": [25, 30, 34, 36, 41, 42, 43, 44, 54, 62], "header": [25, 30, 33, 41, 43], "row": [25, 30], "rowcount": [25, 30], "read_tabl": [25, 30], "list_str_to_typ": [25, 30], "str_to_list_typ": [25, 30], "pyqt_table_from_dict": [25, 30], "param_in_u": [25, 30], "param_in_mhz": [25, 30], "test_snr": [25, 30], "less": [25, 30, 50, 54, 60], "than": [25, 30, 33, 34, 40, 50, 54, 60, 65], "workersign": [25, 27, 30], "fn": [25, 27, 30], "package_directori": [26, 27, 28], "logdialog": 26, "parent": [26, 28, 62], "qtwidget": [26, 28], "qdialog": 26, "qwidget": [26, 28], "add_new_entri": 26, "entri": [26, 55], "update_log_text": 26, "clear_log": 26, "save_log_to_fil": 26, "sampleconccombobox_opt": 27, "fieldsweep_fit": 27, "fsweep_analysi": [27, 53], "respro_process": 27, "relax_process": 27, "t2_process": 27, "get_vexp": 28, "tmin": 28, "deeranalysis_process": 28, "deerplot": 28, "toolbar": 28, "setup_input": 28, "update_inputs_from_dataset": 28, "clearlayout": 28, "layout": 28, "update_analysis_t": 28, "update_fit_result": 28, "create_figur": 28, "update_figur": 28, "process_deeranalysi": 28, "wait_condit": 28, "refresh_d": 28, "brukerawg": [31, 58, 60], "config_fil": [31, 32, 36, 37], "elexsi": [31, 32, 57, 61, 63], "ii": [31, 32, 57, 61, 63], "yaml": [31, 32, 56, 58, 67], "configur": [31, 32, 36, 67], "bg_thread": [31, 32, 34], "store": [31, 32, 34], "here": [31, 32, 52, 53, 58, 60, 61, 62, 65], "d0": [31, 32, 33, 40, 56, 67], "_launch_complex_thread": [31, 32], "axid": [31, 32, 34], "tune": [31, 32, 34, 40, 41, 44, 53, 57], "start": [31, 32, 33, 34, 36, 40, 41, 42, 44, 50, 53, 61], "mpfu_overwrit": [31, 32], "update_pulsespel": [31, 32], "reset_bg_data": [31, 32], "reset_cur_exp": [31, 32, 34], "tune_rectpuls": [31, 32, 34, 37, 53], "tp": [31, 32, 34, 37, 41, 42, 44, 53, 60, 62], "400": [31, 34, 37, 40, 62], "rectangular": [31, 34, 41, 42, 44, 50, 53, 60, 62], "cach": [31, 34, 60], "central": [31, 34, 41, 44, 53], "magnet": [31, 34, 36, 41, 44, 50, 65], "b0": [31, 32, 34, 41, 44, 53, 62], "repet": [31, 34], "p90": [31, 34, 53], "rectpuls": [31, 32, 34, 41, 42, 44, 53, 62], "p180": [31, 34, 53], "oscil": [31, 34, 53], "tun": [31, 34, 40, 63], "now": [31, 32, 34, 50, 52, 53, 55, 60, 62], "tune_nut": 31, "test_puls": [31, 62], "calc_d0": [31, 32, 40], "guess": [31, 32, 53, 55], "better": [31, 32, 65], "found": [31, 32, 51, 62, 67], "after": [31, 32, 36, 38, 52, 54, 57, 60, 65], "calc_d0_from_hahn_echo": [31, 32], "get_specjet_data": [31, 32], "test_if_mpfu_compat": [31, 32], "seq": [31, 32, 33, 34, 53], "hw_log": [32, 36, 37, 38], "brukermpfu": [32, 58], "mpfu": [32, 33, 40, 56, 57, 58, 61, 63], "mock": 32, "respect": 32, "scale": [32, 42, 53, 58, 60], "unchang": 32, "step_paramet": 32, "reduced_seq": 32, "_mpfu_channel": 32, "idenitifi": 32, "uniqu": 32, "tune_pow": [32, 40], "tol": [32, 40], "maxit": [32, 40], "bound": [32, 40], "hardware_wait": 32, "ab": 32, "attenu": [32, 40, 65], "scipi": [32, 40], "chosen": [32, 40, 54, 55], "toler": [32, 40], "iter": [32, 40], "tune_phas": [32, 40], "minimis": [32, 40], "mpfutun": [32, 40], "tau_valu": 32, "550": 32, "eldortun": [32, 40], "test_tp": 32, "psphasecycl": 33, "onlydet": 33, "_mpfu": 33, "_main": 33, "_detect": 33, "__str__": [33, 41, 42, 44], "psparvar": 33, "checkpulsespel": 33, "parvar": [33, 34], "pulsespel": [33, 57, 60, 61, 62, 63], "integ": 33, "possible_delai": 33, "d1": 33, "d2": 33, "d3": 33, "d4": 33, "d5": 33, "d6": 33, "d7": 33, "d8": 33, "d10": 33, "d11": 33, "d12": 33, "d13": 33, "d14": 33, "d15": 33, "possible_var": 33, "c": 33, "possible_puls": 33, "p0": 33, "p1": 33, "p2": 33, "p3": [33, 41, 44, 54], "p4": 33, "p6": 33, "p7": 33, "p8": 33, "p9": 33, "p10": 33, "convert_progt": 33, "progtabl": 33, "reformat": 33, "compat": 33, "move": [33, 54, 62, 65], "previou": 33, "calc_rel_posit": 33, "_new_delai": 33, "kei": [33, 41, 42, 43, 60, 61], "_new_var": 33, "_new_puls": 33, "_adddef": 33, "_addexp": 33, "_expdef": 33, "_addscanloop": 33, "_addphasecycl": [33, 42], "_addawgpuls": 33, "pulse_num": 33, "_check_sequ": 33, "_cmpl_exp": 33, "_cmpl_def": 33, "run_gener": 33, "api": [33, 40, 53, 68], "ps_file": 33, "spel": [33, 36], "xepr": [33, 36, 38, 40, 58, 61], "def": [33, 62], "acquisit": 33, "replacemod": 33, "phasecycl": 33, "acquisition_mod": 33, "conta": 33, "choos": [33, 34, 41, 44, 55], "also": [33, 50, 51, 55, 57, 60, 62, 63, 65, 69], "dimens": [33, 65], "compil": 33, "valueerror": [33, 41, 45], "wrong": [33, 65], "change_dimens": 33, "new_length": 33, "rewrit": 33, "dimesnion": 33, "handl": 33, "pcyc_str": 33, "amp_var": 33, "get_arang": 33, "build_unique_progt": 33, "check_vari": 33, "var": 33, "uprog": 33, "write_pulsespel_fil": 33, "write": [33, 57, 58, 60, 61, 62, 63], "definit": [33, 53, 58], "eth_awg_interfac": [34, 53], "awg_freq": 34, "dig_rat": 34, "andrin": [34, 35, 42], "doll": [34, 35, 42, 54, 56], "commonli": 34, "eth": [34, 53, 56], "z\u00fcrich": 34, "digits": 34, "gsa": [34, 56], "savefold": 34, "session": [34, 61], "matlab": [34, 35, 51, 55, 61], "been": [34, 36, 38, 50, 52, 54, 57, 58, 60, 61, 63, 65], "recomend": 34, "open": [34, 55], "engin": 34, "known": [34, 57, 60], "denot": 34, "acquire_dataset_from_matlab": 34, "most": [34, 38, 50, 52, 53, 61, 62, 65], "recent": [34, 36, 38], "ifgain": [34, 53], "IF": 34, "gain": [34, 36], "launch_norm": 34, "launch_long": 34, "too": [34, 65], "around": [34, 48, 53], "control": [34, 53, 57, 61, 63], "amp_hahn": 34, "_build_exp_struct": 34, "_build_puls": 34, "_build_phase_cycl": 34, "_build_parvar": 34, "physcial": 34, "stop_flag": 34, "uwb_load": 35, "matfil": 35, "compress": 35, "uwb_ev": 35, "develop": [35, 38, 48, 50, 51, 52, 54, 60, 61, 62, 64, 69], "mostli": [35, 54, 69], "uwb_eval_match": 35, "filter_puls": 35, "filter_typ": 35, "filter_width": 35, "cheby2": 35, "butter": 35, "find_max_pulse_length": 35, "estr": 35, "digitally_upconvert": 35, "complex": 35, "fc": 35, "calc_percieved_freq": 35, "sampling_freq": 35, "match_filter_dc": 35, "win": 35, "offset_freq": 35, "scipy_filter_dc": 35, "dta": 35, "xepr_path": 36, "xeprapilink": [36, 38, 40], "_set_xepr_glob": 36, "xepr_inst": 36, "_get_xepr_glob": 36, "_xepr_retri": 36, "func": [36, 42, 62], "get_param": 36, "param_nam": 36, "get_hidden_param": 36, "_set_cur_exp_param": 36, "_set_hidden_param": 36, "set_param": 36, "set_hidden_param": 36, "find_xepr": [36, 38], "_set_cur_exp_glob": 36, "cur_exp_inst": 36, "_get_cur_exp_glob": 36, "find_cur_exp": 36, "try": [36, 64], "find_hidden": 36, "is_exp_run": [36, 38], "onc": [36, 38, 52, 55, 63, 67], "acquire_scan": [36, 38], "end": [36, 38, 40, 63, 65], "still": [36, 38, 48, 55, 57, 60, 61, 63], "longer": [36, 38, 54, 65, 67], "acquire_scan_at": [36, 38], "scan_num": [36, 38], "acquire_scan_2d": [36, 38], "set_pulsespel_var": [36, 38], "spell": [36, 38], "These": [36, 38, 50, 58, 60, 65], "begin": [36, 38], "next": [36, 38, 41, 44, 50, 62, 67], "get_replacemod": 36, "set_replacemod": 36, "get_phasecycl": 36, "set_phasecycl": 36, "get_pulsespel_exp_filenam": 36, "get_pulsespel_exp_filepath": 36, "set_pulsespel_exp_filepath": 36, "fullpath": 36, "get_pulsespel_def_filenam": 36, "get_pulsespel_def_filepath": 36, "set_pulsespel_def_filepath": 36, "get_pulsespel_phase_cycl": 36, "set_pulsespel_phase_cycl": 36, "get_pulsespel_experi": 36, "set_pulsespel_experi": 36, "save_pulsespel_exp": 36, "save_pulsespel_def": 36, "get_acquisition_mod": 36, "set_acquisition_mod": 36, "read": [36, 55, 61], "transient": 36, "compile_pulsespel_prg": [36, 38], "compile_pulsespel_def": [36, 38], "run_exp": [36, 38], "pause_exp": 36, "paus": [36, 61], "rerun_exp": 36, "re": [36, 42, 56, 58], "stop_exp": [36, 38], "abort_exp": [36, 38], "abort": [36, 38], "xepr_sav": 36, "_summary_": 36, "get_field": 36, "set_field": 36, "val": 36, "hold": 36, "magent": [36, 65], "until": [36, 50, 52], "beliv": 36, "get_counterfreq": 36, "counter": 36, "note": [36, 65], "equival": [36, 62], "set_sweep_width": 36, "get_sweep_width": 36, "set_freq": 36, "pol": 36, "bridg": [36, 56, 58, 61], "stepper": [36, 40], "motor": 36, "convers": 36, "polynom": [36, 56], "coeffic": 36, "get_freq": 36, "get_spec_config": 36, "get_attenu": 36, "set_attenu": 36, "get_phas": 36, "set_phas": 36, "get_eldor_freq": 36, "freuenci": 36, "eldor": [36, 40], "chnannel": 36, "set_eldor_freq": 36, "get_video_gain": 36, "video": [36, 56], "db": 36, "set_video_gain": 36, "adjust": [36, 50, 55, 60], "get_config_fil": 36, "set_config_fil": 36, "alreadi": 36, "noth": 36, "get_mw_amp": 36, "amplifi": [36, 65], "set_mw_amp": 36, "get_video_bandwidth": 36, "bandwidth": [36, 62], "set_video_bandwidth": 36, "20": [36, 42, 50, 53, 56], "rng": 37, "val_in_u": [37, 41, 46], "val_in_n": [37, 41, 46], "add_nois": 37, "noise_level": 37, "add_phaseshift": 37, "dummyinterfac": 37, "_simulate_field_sweep": 37, "_simulate_d": 37, "_simulate_cp": 37, "_simulate_t2": 37, "eseem_depth": 37, "_similate_respro": 37, "_simulate_reptimescan": 37, "_gen_eseem": 37, "depth": [37, 54], "pretend": 38, "spectromt": 38, "further": [38, 54, 61], "code": [38, 41, 43, 44, 48, 54, 60], "without": [38, 62], "sat": 38, "front": 38, "manufactu": 38, "hugo": 38, "kara": 38, "me": 38, "dummi": [38, 39, 41, 47], "featur": [38, 55, 57, 61, 64, 65], "relib": 38, "epr": [38, 41, 42, 46, 57, 60, 62, 63], "world": 38, "possibli": 38, "hardware_meta": 38, "dummy_api": 38, "xeprapi_link": [38, 39, 41, 47], "dummy_cur_exp": 38, "__getitem__": 38, "dummy_param": 38, "correspond": [38, 42], "getparam": 38, "exeperi": 38, "aqexprun": 38, "min": [38, 56, 58], "par": 38, "xeprcmd": 38, "aqpgshowprg": 38, "aqpgcompil": 38, "aqexpselect": 38, "aqpgload": 38, "aqpgdefload": 38, "aqpgdefsavea": 38, "aqpgsavea": 38, "vpsave": 38, "xeprexperi": 38, "hidden": 38, "xeprdataset": 38, "dummy_hidden": 38, "dummy_dataset": 38, "v": 38, "bruker_awg": [39, 41, 47], "bruker_mpfu": [39, 41, 47], "bruker_tool": [39, 41, 47], "eth_awg": [39, 41, 47, 53], "eth_awg_load": [39, 41, 47], "dummy_xepr": [39, 41, 47], "xepr_experi": [39, 41, 47], "get_nut": 40, "nu": 40, "nx": [40, 62], "128": [40, 42, 53, 62], "cp_run": 40, "num_puls": 40, "ps_length": 40, "num_point": [40, 53], "256": 40, "srt": 40, "6000000": 40, "deer5p_run": 40, "deadtim": [40, 54], "80": [40, 53, 56], "pump_frq": 40, "run_5p": 40, "run_4p": 40, "run_cp": 40, "tau": [40, 41, 44, 53, 54], "680": 40, "spectrometr": 40, "lower": [40, 62], "ideal": 40, "_setup_echo": 40, "collect": 40, "associ": 40, "700": 40, "incoher": 40, "_setup_exp": 40, "_get_exp": 40, "find_min": 40, "pulseprofil": 40, "4000000": 40, "seper": [40, 53], "math": [40, 50], "_freq_sweep": 40, "nu_init": 40, "nu_fin": 40, "calibratefreq": 40, "deg": 40, "polynomi": [40, 58], "gunn": [40, 58], "diod": [40, 58], "4095": [40, 58], "degre": [40, 65], "gui": [41, 47, 48, 53, 68, 69], "deer_analysi": [41, 47], "twod_experi": [41, 47], "_version": [41, 47], "report": [41, 47, 48, 55, 64, 65, 68], "util": [41, 47], "eprload": [41, 45], "runtimeerror": [41, 45], "build_tabl": [41, 42, 46], "params_width": [41, 46], "sop": [41, 42, 46], "comp": [41, 46], "matrici": [41, 46], "port": [41, 42, 46], "easyspin": [41, 42, 46], "http": [41, 42, 46, 51, 52, 58], "org": [41, 42, 46, 52], "stefan": [41, 42, 46], "stoll": [41, 42, 46], "arthur": [41, 42, 46], "schweiger": [41, 42, 46], "comprehens": [41, 42, 46], "spectral": [41, 42, 46], "simul": [41, 42, 44, 46], "magn": [41, 42, 46], "178": [41, 42, 46], "42": [41, 42, 46], "55": [41, 42, 46], "2006": [41, 42, 46], "david": [41, 42, 46], "britt": [41, 42, 46], "effici": [41, 42, 46], "spectra": [41, 42, 46], "phy": [41, 42, 46, 54], "chem": [41, 42, 46, 54], "11": [41, 42, 46, 53], "6614": [41, 42, 46], "6625": [41, 42, 46], "2009": [41, 42, 46], "its": [41, 46, 52, 62], "qunatum": [41, 46], "z": [41, 42, 46], "transpose_dict_of_list": [41, 46], "turn": [41, 46, 52, 67], "transpose_list_of_dict": [41, 46], "save_fil": [41, 46], "autoeprdecod": [41, 46], "dct": [41, 42, 44, 46], "gcd": [41, 46], "greatest": [41, 46], "common": [41, 46, 50, 52, 60], "dividor": [41, 46], "nanosecond": [41, 46], "round_step": [41, 46], "frequneci": [41, 44], "offset": [41, 44, 62], "accumul": [41, 44], "itn": [41, 44], "seqtable_step": [41, 44], "plot_pulse_exc": [41, 44], "resonatorprofil": [41, 44], "addpuls": [41, 44, 62], "add": [41, 42, 44, 52, 62, 65], "_estimate_tim": [41, 44], "_buildphasecycl": [41, 44], "reduc": [41, 44, 54, 62], "shift_detfreq_to_zero": [41, 44], "ispulsefocus": [41, 42, 44], "express": [41, 44], "isdelayfocus": [41, 42, 44], "focus": [41, 42, 44, 62], "smallest": [41, 44], "_convert_to_delai": [41, 44], "_convert_to_puls": [41, 44], "_checkrect": [41, 44], "deersequ": [41, 44, 53, 54], "tau4": [41, 44, 54], "eseem_avg": [41, 44], "peldor": [41, 44, 57], "interpuls": [41, 44], "guass": [41, 44], "1st": [41, 44], "otherwis": [41, 42, 44, 50, 60], "introduc": [41, 44], "small": [41, 44, 54], "across": [41, 44, 50, 58], "them": [41, 42, 44, 54, 61], "8n": [41, 44], "16n": [41, 44], "add_eseem_avg": [41, 44], "three_puls": [41, 44], "four": [41, 44, 57, 65], "four_puls": [41, 44, 54], "five_puls": [41, 44, 53, 54], "re_step": [41, 44], "re_dim": [41, 44], "five": [41, 44, 53, 54, 57, 65], "seven_puls": [41, 44, 54], "seven": [41, 44, 57], "ndeer_cp": [41, 44, 54], "pcyc": [41, 42, 44, 62], "observ": [41, 44], "dc": [41, 44, 54, 62], "normaldc": [41, 44], "ob": [41, 44], "obsdc": [41, 44], "select_pcyc": [41, 44, 53, 54], "would": [41, 44, 54, 60], "short": [41, 44, 54, 61], "remain": [41, 44, 54, 57], "ref": [41, 44, 54, 62], "xp": [41, 44, 54], "pe12rp": [41, 44, 54], "se": [41, 44, 54], "pe12": [41, 44, 54], "pe12rpr3": [41, 44, 54], "8step_3p": [41, 44, 54], "16step_4p": [41, 44, 54], "16step_5p": [41, 44, 53, 54], "pep02r3": [41, 44, 54], "pe1p0r2r3b": [41, 44, 54], "32step_7p": [41, 44, 54], "see": [41, 44, 60], "hahnechosequ": [41, 44, 60, 62], "t2relaxationsequ": [41, 44], "40": [41, 44, 53], "t2": [41, 44], "increas": [41, 42, 44, 50, 52, 62], "fieldsweepsequ": [41, 44, 53], "bwidth": [41, 44, 53], "edf": [41, 43, 44, 50, 53], "reptimescan": [41, 44], "reptime_max": [41, 44], "perfom": [41, 44, 52], "etc": [41, 44, 52, 53, 56, 63, 65], "carrpurcellsequ": [41, 44, 53], "decoupl": [41, 44], "_build_sequ": [41, 44], "refocusedecho2dsequ": [41, 44], "resonatorprofilesequ": [41, 44, 53], "fwidth": [41, 44], "3ghz": [41, 44], "2000": [41, 44, 53], "500": [41, 44, 53], "twtprofilesequ": [41, 44], "twt": [41, 44, 61, 63], "pages": [41, 43], "a4": [41, 43], "canva": [41, 43], "doc": [41, 43, 51, 68], "footer": [41, 43], "_build": [41, 43], "add_titl": [41, 43], "add_new_sect": [41, 43], "add_text": [41, 43], "add_code_block": [41, 43], "add_figur": [41, 43], "add_spac": [41, 43], "height": [41, 43], "add_page_break": [41, 43], "add_tabl": [41, 43], "reportlab": [41, 43], "flowabl": [41, 43], "combo_figur": [41, 43], "init_d": [41, 43], "long_deer": [41, 43], "2x2": [41, 43], "left": [41, 43, 55], "bottom": [41, 43, 55], "final": [41, 43, 53, 62, 63, 67], "flipangl": [42, 53, 62], "arbitari": 42, "amplitud": [42, 57, 60], "sign": [42, 62], "_buildfmam": [42, 62], "am": [42, 62], "fm": [42, 62], "build_shap": 42, "uuid": 42, "non": [42, 54, 61, 62], "represent": 42, "_calc_fft": 42, "10000": 42, "exciteprofil": 42, "gunnar": 42, "jeschk": [42, 54], "pribitz": 42, "dolla": 42, "coher": [42, 62], "transfer": [42, 63], "passag": 42, "electron": [42, 54, 57], "paramagnet": 42, "spectroscopi": [42, 54], "119": 42, "13570": 42, "13582": 42, "2015": [42, 54], "caution": 42, "larger": 42, "linearli": 42, "mx": 42, "magentis": 42, "my": [42, 56, 60, 61], "mz": 42, "plot_fft": 42, "_pcyc_str": 42, "clear": [42, 60], "deep": 42, "everi": [42, 58, 60, 61], "anoth": [42, 58, 65], "memori": 42, "chage": 42, "stage": 42, "symetr": 42, "about": [42, 53, 60, 62], "centr": [42, 57], "deprec": 42, "WILL": 42, "BE": 42, "soon": [42, 59, 60, 64], "monochromat": [42, 62], "flaot": 42, "angl": 42, "radian": 42, "hspuls": 42, "order1": 42, "order2": 42, "6": [42, 53, 54, 56], "beta": [42, 48], "hyperboilc": 42, "secant": [42, 50], "swept": [42, 54], "chirppuls": [42, 62], "linear": [42, 61, 62], "sincpuls": 42, "order": [42, 58], "shape": [42, 50, 54, 63], "gaussianpuls": 42, "build_default_puls": 42, "12": [42, 53, 56], "package_dir": 43, "svgflowabl": 43, "svg": 43, "platypu": 43, "byte": 43, "streasm": 43, "rml": 43, "draw": 43, "initializt": 43, "io": 43, "bytesio": 43, "_arg": 43, "chart": 43, "save_path": 43, "spectrometerinfo": 43, "userinput": 43, "progress_bar": 45, "post": 45, "progress_bar_frac": 45, "num": 45, "den": 45, "yet": [48, 58], "patient": 48, "unclear": 48, "feel": [48, 65], "free": [48, 50, 52, 54, 60], "contact": [48, 59, 61], "independ": [48, 56, 57, 60, 63], "enabl": 48, "push": [48, 57, 60], "button": [48, 50, 55, 57, 60, 63, 64, 67], "fulli": [48, 50, 57, 63, 67], "autom": [48, 57, 60, 63, 68], "establish": [48, 50], "algorithum": 48, "friendli": 48, "via": 48, "addition": [48, 50, 55, 67], "backend": 48, "project": [48, 61, 64], "integr": [48, 57, 63, 65], "intuit": 48, "graphic": [48, 50, 68, 69], "high": [48, 54, 65], "qualiti": [48, 60], "pdf": [48, 55, 68], "much": [48, 50, 52, 60, 65], "activ": [48, 57, 60, 63], "consid": [48, 61, 62], "releas": [48, 52], "minim": 50, "press": [50, 55, 63], "unknown": 50, "sampl": [50, 54, 55, 56, 60, 67], "label": [50, 57], "effic": 50, "cari": 50, "fitter": 50, "later": [50, 51, 60, 63, 65], "chose": 50, "90": [50, 60], "charecteris": 50, "clarifi": 50, "For": [50, 53, 57, 58, 60, 61, 62, 63, 67], "shortest": 50, "chirp": [50, 54, 63], "compens": [50, 63], "hard": 50, "alwai": [50, 51, 54, 60, 65], "primarili": [50, 65], "predict": 50, "4pdeer": 50, "refoucs": 50, "characteris": 50, "we": [50, 51, 52, 53, 58, 60, 61, 62, 64, 65, 67], "unless": [50, 65], "tau_": 50, "evo": 50, "mu": 50, "becaus": [50, 52], "nearli": [50, 61, 62], "higher": [50, 54, 58], "sensit": [50, 54], "tau_1": 50, "tau_2": 50, "hyperbol": 50, "h": [50, 54], "reach": [50, 60], "appraoch": 50, "come": [50, 52, 60, 62], "exce": 50, "achiev": 50, "again": 50, "At": [50, 51, 55], "moment": 50, "q": [50, 56], "band": [50, 57], "wai": [51, 52, 55, 58, 60, 62, 64, 69], "aim": [51, 65], "abl": 51, "excut": 51, "host": 51, "pypi": [51, 58], "download": 51, "latest": [51, 58], "gig": 51, "git": [51, 58], "clone": 51, "github": [51, 54, 58, 64], "com": [51, 58, 59], "jeschkelab": 51, "branch": 51, "pull": [51, 54, 64], "dev": 51, "plu": 51, "pytest": 51, "maco": 51, "zsh": 51, "shell": 51, "edit": 51, "plan": 51, "expand": [51, 54, 61, 63], "corespond": 52, "o": 52, "ones": [52, 62], "easili": [52, 55, 60], "present": [52, 54], "few": [52, 53, 60, 61], "suggest": [52, 65], "oss": 52, "our": [52, 53, 62], "offici": 52, "discontinu": 52, "30th": 52, "june": 52, "2024": 52, "secur": 52, "risk": 52, "root": 52, "privileg": 52, "On": [52, 55, 56, 60, 61, 65, 67], "close": 52, "ti": 52, "consol": 52, "reason": [52, 53], "becom": [52, 65], "One": [52, 54, 58, 65], "stuck": 52, "2021": 52, "red": 52, "hat": 52, "enterpris": 52, "linux": 52, "rhel": 52, "term": [52, 62], "lt": 52, "emin": 52, "dstribut": 52, "fedora": 52, "2014": 52, "2013": [52, 54], "problem": [52, 65], "python2": 52, "necessari": [52, 53, 55, 56], "dependeci": 52, "howev": [52, 57, 60, 61, 62, 65], "modern": [52, 57, 63], "challeng": [52, 54], "outsid": [52, 65], "sphere": 52, "team": [52, 61], "caus": [52, 61, 65], "backup": 52, "attempt": 52, "repositori": 52, "yum": 52, "fundament": [52, 61], "conflict": 52, "openssl": 52, "ip": [52, 58], "encrypt": 52, "gcc": 52, "perl": 52, "pcre": 52, "devel": 52, "zlib": 52, "wget": 52, "ftp": 52, "old": 52, "tar": 52, "gz": 52, "xvf": 52, "cd": 52, "config": [52, 55, 58, 67], "prefix": 52, "usr": 52, "openssldir": 52, "ssl": 52, "libdir": 52, "lib": 52, "share": 52, "export": 52, "ld_library_path": 52, "lib64": 52, "bashrc": 52, "correctli": 52, "xeprapi": [52, 57, 58, 61, 63], "insatl": 52, "tcl": 52, "tk": 52, "manag": 52, "pyenv": 52, "enviro": 52, "In": [52, 53, 58, 60, 62], "newli": 52, "directori": [52, 67], "ca": 52, "certif": 52, "sudo": 52, "sbin": 52, "advanc": [53, 57, 60], "beyond": 53, "within": [53, 55], "notebook": 53, "interced": 53, "modif": [53, 54], "alogoithm": 53, "custom": [53, 69], "pyplot": 53, "plt": 53, "made": 53, "gyro_n": 53, "0028087": 53, "2172": 53, "2e3": [53, 54], "5e3": 53, "50k": 53, "fsweep": 53, "120": 53, "pi2_puls": [53, 60], "pi_puls": [53, 60], "print": [53, 60, 62, 65], "12183": 53, "217": 53, "det_window": 53, "gate": 53, "hh": 53, "mm": 53, "ss": 53, "14": 53, "24": 53, "501": 53, "4_dev": 53, "autodeer_fieldsweep": 53, "while": 53, "sleep": 53, "gyro_exp": [53, 54], "insid": 53, "dip": 53, "rpseq": 53, "12182": 53, "13": 53, "38": 53, "2500": 53, "3000": 53, "512": 53, "1201": 53, "31": 53, "02": [53, 56], "nut": 53, "think": [53, 62], "form": [53, 54, 57, 60, 62, 63, 64], "three": [53, 54, 56, 64], "\u03c0": 53, "refous": 53, "det_ev": [53, 54], "fpump": 53, "fob": 53, "calc_optimal_deer_frq": 53, "exc_limit": 53, "025": 53, "plot_optimal_deer_frq": 53, "cpseq": 53, "32e3": 53, "carrpurcel": 53, "32000": 53, "8000": 53, "24000": 53, "770": 53, "1e3": [53, 54, 60], "cp_data": 53, "800": 53, "015": 53, "amp_nut": [53, 60], "15": [53, 54, 56], "49": 53, "2400": 53, "2600": 53, "2800": 53, "7800": 53, "10400": 53, "320": 53, "autodeer_4hr": 53, "new_tau": 53, "12181": 53, "332": 53, "5600": 53, "5800": 53, "6000": 53, "17400": 53, "23200": 53, "747": 53, "year": 54, "With": 54, "advent": 54, "even": [54, 63, 65], "request": [54, 64], "below": [54, 55], "advantag": [54, 62], "disadvantag": 54, "narrow": 54, "pathwai": [54, 62], "consum": 54, "moder": 54, "borbat": 54, "addit": [54, 56, 60, 61, 62], "fix": [54, 64], "primari": 54, "occur": [54, 65], "spindler": 54, "involv": [54, 60], "togeth": [54, 60], "inward": 54, "third": [54, 58], "premis": 54, "instead": [54, 62], "keep": [54, 60], "georgieva": 54, "freed": 54, "improv": [54, 68], "biomolecul": 54, "lett": 54, "invers": 54, "2017": 54, "recommen": 55, "porgram": 55, "analys": [55, 57, 60, 63, 67], "knownledg": 55, "minor": 55, "customis": 55, "suit": 55, "abil": [55, 57], "click": [55, 64, 67], "green": [55, 67], "light": [55, 67], "appear": 55, "tab": 55, "screen": 55, "enter": 55, "temperatur": [55, 65], "wish": 55, "center": [55, 56], "section": 55, "don": 55, "As": [55, 56, 67], "reciev": 55, "graph": [55, 58], "somewhat": 55, "akin": 55, "lab": 55, "book": 55, "kept": [55, 65], "nativ": [55, 60, 61], "h5": 55, "hdf5": 55, "standardis": 55, "scientif": 55, "commun": [55, 65], "manufactur": [56, 58], "bridge12": 56, "e580": [56, 58], "rate": 56, "det": [56, 58, 62], "cal": [56, 58], "calibr": [56, 58, 61], "c243": [56, 58], "hybrid": [56, 58], "85625754e": 56, "92378391e": 56, "52260651e": 56, "91334739e": 56, "00": 56, "08737812e": 56, "650": 56, "bw": [56, 62], "holder": 56, "265": 56, "gap": 56, "976": 56, "nnlssolver": 56, "cvx": 56, "xtol": 56, "ftol": 56, "max_nfev": 56, "1e8": 56, "lin_maxit": 56, "1e4": 56, "lin_tol": 56, "regparam": 56, "bic": 56, "aic": 56, "refresh_tim": 56, "min_tp": 56, "f243_awg": 56, "pent": 56, "banana": 56, "82": 56, "simplifi": 57, "techniqu": 57, "biolog": 57, "site": 57, "protein": 57, "entir": 57, "walk": [57, 63], "awai": [57, 63], "own": [57, 60, 61, 69], "experienc": 57, "easi": [57, 58, 63], "varieti": [57, 63], "variant": 57, "dure": 57, "toolbox": [57, 63], "home": [57, 61, 63], "tradit": [57, 63], "written": [57, 63, 65], "slightli": [58, 67], "nonetheless": [58, 61], "differenti": 58, "signific": [58, 61], "writen": 58, "markup": 58, "languag": [58, 60], "simultan": 58, "readabl": 58, "67652": 58, "70": 58, "2050": 58, "203": 58, "m8190a": 58, "192": 58, "168": 58, "analogu": [58, 61], "newer": 58, "digit": [58, 61], "potenti": 58, "voltag": 58, "least": 58, "down": [58, 62, 65], "1mhz": 58, "instal": 58, "oe": 58, "fet": 58, "incompat": 58, "consist": [60, 62], "might": [60, 65], "conduct": 60, "whole": 60, "access": [60, 65, 69], "meanwhil": 60, "simpli": [60, 62], "acces": 60, "dsl": 60, "look": [60, 62], "12220": [60, 62], "01": 60, "3e3": [60, 62], "seen": 60, "pritn": 60, "approach": [60, 61, 62, 63], "scenario": 60, "solv": 60, "modifi": [60, 69], "equal": [60, 61, 65], "tune_rect": 60, "180": 60, "_": 60, "p90_12_34": 60, "rememb": 60, "clear_cach": 60, "appropri": [60, 65], "piec": [60, 65], "trival": 60, "decid": 60, "truli": 60, "accur": 60, "trivial": 60, "regular": 60, "interv": 60, "period": 60, "complic": 60, "multi": 60, "combin": 60, "mutlipl": 60, "api_doc": 60, "foot": 61, "cours": 61, "guid": 61, "flavour": 61, "sub": 61, "stabil": 61, "similar": 61, "mean": [61, 65], "fashion": 61, "split": 61, "caveat": 61, "separ": [61, 62, 65], "strongli": 61, "compon": 61, "go": [61, 64], "simplest": 62, "train": 62, "mw": 62, "spectrometrist": 62, "decreas": 62, "physic": 62, "demonstr": 62, "hahnecho": 62, "sequec": 62, "200n": 62, "6u": 62, "100n": 62, "addpulsesprog": 62, "2e2": 62, "6e3": 62, "unwant": 62, "individu": [62, 65], "declar": 62, "view": 62, "simplist": 62, "wideband": 62, "wider": 62, "lobe": 62, "chip": 62, "init_freq": 62, "final_freq": 62, "unlik": 62, "init": 62, "statment": 62, "__init__": 62, "rf": 62, "endor": 62, "dnp": 62, "back": [63, 64, 65], "readili": 63, "larg": [63, 65], "intellig": 63, "satisfi": 63, "generalis": 63, "procedur": 63, "submit": 64, "bug": 64, "discuss": [64, 65], "join": 64, "fork": 64, "propos": 65, "structur": 65, "roughli": 65, "lowest": 65, "shouldn": 65, "happen": 65, "could": [65, 67], "retrospect": 65, "investig": 65, "xthe": 65, "someth": 65, "uncertainti": 65, "mayb": 65, "risen": 65, "accept": 65, "gone": 65, "sent": 65, "safe": 65, "stope": 65, "seriou": 65, "safeti": 65, "equip": 65, "danger": 65, "defenc": 65, "miss": 65, "That": 65, "switch": 65, "stand": 65, "desktop": 65, "alert": 65, "administr": 65, "email": 65, "slack": 65, "carefulli": 65, "restart": 65, "tmp": 65, "unix": 65, "encod": 65, "utf": 65, "ascii": 65, "dai": 65, "week": 65, "prevent": 65, "weekli": 65, "big": 65, "daili": 65, "unnecessari": 65, "earlier": 65, "aris": 65, "core_logg": 65, "getlogg": 65, "hard_logg": 65, "sublogg": 65, "easier": 65, "mag_logg": 65, "hello": 65, "todai": 65, "12220g": 65, "didn": 65, "teleport": 65, "success": 67, "live": 67, "major": 68, "reliabl": 68, "easiest": 69, "explantori": 69, "protocol": 69}, "objects": {"": [[41, 0, 0, "-", "autodeer"]], "autodeer": [[41, 1, 1, "", "CarrPurcellAnalysis"], [41, 1, 1, "", "CarrPurcellSequence"], [41, 1, 1, "", "Criteria"], [41, 1, 1, "", "DEERCriteria"], [41, 1, 1, "", "DEERSequence"], [12, 0, 0, "-", "DEER_analysis"], [41, 3, 1, "id25", "DEERanalysis"], [41, 3, 1, "", "DEERanalysis_plot"], [41, 3, 1, "", "DEERanalysis_plot_pub"], [41, 1, 1, "", "EPRAccessor"], [13, 0, 0, "-", "FieldSweep"], [41, 1, 1, "", "FieldSweepAnalysis"], [41, 1, 1, "", "FieldSweepSequence"], [41, 1, 1, "", "HahnEchoSequence"], [41, 3, 1, "", "IdentifyROI"], [14, 0, 0, "-", "Logging"], [41, 1, 1, "", "RefocusedEcho2DSequence"], [15, 0, 0, "-", "Relaxation"], [41, 1, 1, "", "Reporter"], [41, 1, 1, "", "ReptimeAnalysis"], [41, 1, 1, "", "ReptimeScan"], [16, 0, 0, "-", "ResPro"], [41, 1, 1, "", "ResonatorProfileAnalysis"], [41, 1, 1, "", "ResonatorProfileSequence"], [41, 1, 1, "", "SNRCriteria"], [41, 1, 1, "id27", "Sequence"], [41, 1, 1, "", "T2RelaxationSequence"], [41, 1, 1, "", "TWTProfileSequence"], [41, 1, 1, "", "TimeCriteria"], [17, 0, 0, "-", "TwoD_Experiment"], [41, 4, 1, "", "__version__"], [18, 0, 0, "-", "_version"], [41, 3, 1, "id26", "autoEPRDecoder"], [41, 3, 1, "id0", "build_table"], [19, 0, 0, "-", "classes"], [41, 4, 1, "", "cmap"], [20, 0, 0, "-", "colors"], [41, 3, 1, "", "combo_figure"], [41, 3, 1, "", "create_dataset_from_axes"], [41, 3, 1, "", "create_dataset_from_bruker"], [41, 3, 1, "", "create_dataset_from_sequence"], [21, 0, 0, "-", "criteria"], [22, 0, 0, "-", "dataset"], [41, 3, 1, "", "detect_ESEEM"], [41, 3, 1, "", "eprload"], [41, 3, 1, "", "gcd"], [41, 3, 1, "", "get_all_axes"], [41, 3, 1, "", "get_all_fixed_param"], [25, 0, 0, "-", "gui"], [39, 0, 0, "-", "hardware"], [41, 4, 1, "", "log"], [41, 3, 1, "", "normalise_01"], [41, 3, 1, "", "optimise_pulses"], [41, 3, 1, "", "optimise_spectra_position"], [41, 3, 1, "", "plot_1Drelax"], [41, 3, 1, "", "plot_overlap"], [41, 4, 1, "", "primary_colors"], [42, 0, 0, "-", "pulses"], [43, 0, 0, "-", "reporter"], [41, 3, 1, "", "round_step"], [41, 3, 1, "", "save_file"], [44, 0, 0, "-", "sequences"], [41, 3, 1, "", "sop"], [45, 0, 0, "-", "tools"], [41, 3, 1, "", "transpose_dict_of_list"], [41, 3, 1, "", "transpose_list_of_dicts"], [46, 0, 0, "-", "utils"], [41, 3, 1, "", "val_in_ns"], [41, 3, 1, "", "val_in_us"]], "autodeer.CarrPurcellAnalysis": [[41, 2, 1, "", "check_decay"], [41, 2, 1, "", "find_optimal"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "plot"]], "autodeer.CarrPurcellSequence": [[41, 2, 1, "", "_build_sequence"]], "autodeer.Criteria": [[41, 2, 1, "", "__add__"]], "autodeer.DEERSequence": [[41, 2, 1, "", "add_ESEEM_avg"], [41, 2, 1, "", "five_pulse"], [41, 2, 1, "", "four_pulse"], [41, 2, 1, "", "nDEER_CP"], [41, 2, 1, "", "select_pcyc"], [41, 2, 1, "", "seven_pulse"], [41, 2, 1, "", "simulate"], [41, 2, 1, "", "three_pulse"]], "autodeer.DEER_analysis": [[12, 3, 1, "", "DEERanalysis"], [12, 3, 1, "", "DEERanalysis_plot"], [12, 3, 1, "", "DEERanalysis_plot_pub"], [12, 3, 1, "", "IdentifyROI"], [12, 4, 1, "", "MODULE_DIR"], [12, 3, 1, "", "background_func"], [12, 3, 1, "", "build__lowpass_butter_filter"], [12, 3, 1, "", "calc_correction_factor"], [12, 3, 1, "", "calc_identifiability"], [12, 3, 1, "", "find_longest_pulse"], [12, 3, 1, "", "functional"], [12, 4, 1, "", "log"], [12, 3, 1, "", "normalise_01"], [12, 3, 1, "", "optimise_pulses"], [12, 3, 1, "", "plot_overlap"], [12, 3, 1, "", "remove_echo"], [12, 3, 1, "", "resample_and_shift_vector"], [12, 3, 1, "", "shift_pulse_freq"]], "autodeer.EPRAccessor": [[41, 5, 1, "", "SNR"], [41, 5, 1, "", "correctphase"], [41, 5, 1, "", "correctphasefull"], [41, 5, 1, "", "fft"], [41, 5, 1, "", "normalise"], [41, 5, 1, "", "save"], [41, 5, 1, "", "sequence"]], "autodeer.FieldSweep": [[13, 1, 1, "", "FieldSweepAnalysis"], [13, 1, 1, "", "SpinSystem"], [13, 3, 1, "", "build_spectrum"], [13, 3, 1, "", "create_Nmodel"], [13, 3, 1, "", "erot"], [13, 3, 1, "", "eyekron"], [13, 3, 1, "", "ham"], [13, 3, 1, "", "ham_ez"], [13, 3, 1, "", "ham_nz"], [13, 3, 1, "", "kroneye"], [13, 3, 1, "", "resfields"]], "autodeer.FieldSweep.FieldSweepAnalysis": [[13, 2, 1, "", "calc_gyro"], [13, 2, 1, "", "calc_noise_level"], [13, 2, 1, "", "find_max"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "plot"]], "autodeer.FieldSweepAnalysis": [[41, 2, 1, "", "calc_gyro"], [41, 2, 1, "", "calc_noise_level"], [41, 2, 1, "", "find_max"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "plot"]], "autodeer.Logging": [[14, 1, 1, "", "DictFormater"], [14, 1, 1, "", "QtLogHandler"], [14, 3, 1, "", "change_log_level"], [14, 3, 1, "", "setup_logs"]], "autodeer.Logging.DictFormater": [[14, 2, 1, "", "format"]], "autodeer.Logging.QtLogHandler": [[14, 2, 1, "", "emit"], [14, 6, 1, "", "signal"]], "autodeer.RefocusedEcho2DSequence": [[41, 2, 1, "", "_build_sequence"]], "autodeer.Relaxation": [[15, 1, 1, "", "CarrPurcellAnalysis"], [15, 1, 1, "", "ReptimeAnalysis"], [15, 4, 1, "", "cmap"], [15, 3, 1, "", "detect_ESEEM"], [15, 3, 1, "", "plot_1Drelax"]], "autodeer.Relaxation.CarrPurcellAnalysis": [[15, 2, 1, "", "check_decay"], [15, 2, 1, "", "find_optimal"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "plot"]], "autodeer.Relaxation.ReptimeAnalysis": [[15, 2, 1, "", "calc_optimal_reptime"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "plot"]], "autodeer.Reporter": [[41, 2, 1, "", "_build"], [41, 2, 1, "", "add_code_block"], [41, 2, 1, "", "add_figure"], [41, 2, 1, "", "add_new_section"], [41, 2, 1, "", "add_page_break"], [41, 2, 1, "", "add_space"], [41, 2, 1, "", "add_table"], [41, 2, 1, "", "add_text"], [41, 2, 1, "", "add_title"], [41, 2, 1, "", "footer"], [41, 2, 1, "", "header"]], "autodeer.ReptimeAnalysis": [[41, 2, 1, "", "calc_optimal_reptime"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "plot"]], "autodeer.ResPro": [[16, 3, 1, "", "BSpline_extra"], [16, 1, 1, "", "ResonatorProfileAnalysis"], [16, 3, 1, "", "calc_overlap"], [16, 3, 1, "", "ceil"], [16, 3, 1, "", "floor"], [16, 3, 1, "", "optimise_spectra_position"]], "autodeer.ResPro.ResonatorProfileAnalysis": [[16, 2, 1, "", "_process_fit"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "plot"], [16, 2, 1, "", "process_nutations"]], "autodeer.ResonatorProfileAnalysis": [[41, 2, 1, "", "_process_fit"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "plot"], [41, 2, 1, "", "process_nutations"]], "autodeer.ResonatorProfileSequence": [[41, 2, 1, "", "_build_sequence"]], "autodeer.Sequence": [[41, 2, 1, "id42", "__str__"], [41, 2, 1, "id33", "_buildPhaseCycle"], [41, 2, 1, "id41", "_checkRect"], [41, 2, 1, "id39", "_convert_to_delay"], [41, 2, 1, "id40", "_convert_to_pulses"], [41, 2, 1, "id32", "_estimate_time"], [41, 2, 1, "id47", "_from_dict"], [41, 2, 1, "id48", "_from_json"], [41, 2, 1, "id44", "_to_dict"], [41, 2, 1, "id45", "_to_json"], [41, 2, 1, "id31", "addPulse"], [41, 2, 1, "id38", "convert"], [41, 2, 1, "id43", "copy"], [41, 2, 1, "id34", "evolution"], [41, 2, 1, "id37", "isDelayFocused"], [41, 2, 1, "id36", "isPulseFocused"], [41, 2, 1, "id49", "load"], [41, 2, 1, "id29", "plot"], [41, 2, 1, "id30", "plot_pulse_exc"], [41, 2, 1, "id46", "save"], [41, 5, 1, "id28", "seqtable_steps"], [41, 2, 1, "id35", "shift_detfreq_to_zero"]], "autodeer.TWTProfileSequence": [[41, 2, 1, "", "_build_sequence"]], "autodeer.TwoD_Experiment": [[17, 1, 1, "", "TwoDExperimentAnalysis"]], "autodeer.TwoD_Experiment.TwoDExperimentAnalysis": [[17, 2, 1, "", "_data_transpose"], [17, 2, 1, "", "_stability_check"], [17, 2, 1, "", "calculate_noise_level"], [17, 2, 1, "", "calculate_optimal"], [17, 2, 1, "", "calculate_snr_threshold"], [17, 2, 1, "", "create_bahrenberg_plots"], [17, 2, 1, "", "create_slice_plot"], [17, 2, 1, "", "create_twoD_plot"], [17, 2, 1, "", "estimated_snr"], [17, 2, 1, "", "import_data"], [17, 2, 1, "", "import_dataset"], [17, 2, 1, "", "invert_signal"], [17, 2, 1, "", "load"], [17, 2, 1, "", "optimal_slice_plot"], [17, 2, 1, "", "set_snr_target"], [17, 2, 1, "", "set_snr_threshold"], [17, 2, 1, "", "set_time_target"], [17, 2, 1, "", "snr_normalize"], [17, 2, 1, "", "value_at_pos"], [17, 2, 1, "", "value_at_time"]], "autodeer._version": [[18, 4, 1, "", "__version__"]], "autodeer.classes": [[19, 1, 1, "", "Interface"], [19, 1, 1, "", "Parameter"]], "autodeer.classes.Interface": [[19, 2, 1, "", "acquire_dataset"], [19, 2, 1, "", "connect"], [19, 2, 1, "", "isrunning"], [19, 2, 1, "", "launch"], [19, 2, 1, "", "terminate"], [19, 2, 1, "", "terminate_at"]], "autodeer.classes.Parameter": [[19, 2, 1, "", "__add__"], [19, 2, 1, "", "__eq__"], [19, 2, 1, "", "__mul__"], [19, 2, 1, "", "__rmul__"], [19, 2, 1, "", "__sub__"], [19, 2, 1, "", "_from_dict"], [19, 2, 1, "", "_from_json"], [19, 2, 1, "", "_to_dict"], [19, 2, 1, "", "_to_json"], [19, 2, 1, "", "add_axis"], [19, 2, 1, "", "copy"], [19, 5, 1, "", "dim"], [19, 2, 1, "", "get_axis"], [19, 2, 1, "", "is_static"], [19, 2, 1, "", "load"], [19, 2, 1, "", "remove_dynamic"], [19, 2, 1, "", "save"]], "autodeer.colors": [[20, 4, 1, "", "ReIm_colors"], [20, 4, 1, "", "primary_colors"], [20, 4, 1, "", "shade_colors"]], "autodeer.criteria": [[21, 1, 1, "", "Criteria"], [21, 1, 1, "", "DEERCriteria"], [21, 1, 1, "", "SNRCriteria"], [21, 1, 1, "", "TimeCriteria"], [21, 4, 1, "", "log"]], "autodeer.criteria.Criteria": [[21, 2, 1, "", "__add__"]], "autodeer.dataset": [[22, 1, 1, "", "EPRAccessor"], [22, 3, 1, "", "create_dataset_from_axes"], [22, 3, 1, "", "create_dataset_from_bruker"], [22, 3, 1, "", "create_dataset_from_sequence"], [22, 3, 1, "", "get_all_axes"], [22, 3, 1, "", "get_all_fixed_param"]], "autodeer.dataset.EPRAccessor": [[22, 5, 1, "", "SNR"], [22, 5, 1, "", "correctphase"], [22, 5, 1, "", "correctphasefull"], [22, 5, 1, "", "fft"], [22, 5, 1, "", "normalise"], [22, 5, 1, "", "save"], [22, 5, 1, "", "sequence"]], "autodeer.gui": [[25, 1, 1, "", "Worker"], [25, 1, 1, "", "WorkerSignals"], [23, 0, 0, "-", "__main__"], [25, 1, 1, "", "autoDEERUI"], [24, 0, 0, "-", "autoDEER_worker"], [25, 3, 1, "", "fill_table"], [25, 3, 1, "", "getCIstring"], [25, 3, 1, "", "get_sequence_rows"], [25, 3, 1, "", "list_str_to_type"], [25, 3, 1, "", "load_epr_file"], [26, 0, 0, "-", "log"], [27, 0, 0, "-", "main"], [25, 3, 1, "", "param_in_MHz"], [25, 3, 1, "", "param_in_us"], [25, 3, 1, "", "pyqt_table_from_dict"], [28, 0, 0, "-", "quickdeer"], [25, 3, 1, "", "read_table"], [25, 3, 1, "", "str_to_list_type"], [25, 3, 1, "", "test_SNR"], [29, 0, 0, "-", "test_main"], [30, 0, 0, "-", "tools"]], "autodeer.gui.Worker": [[25, 2, 1, "", "run"]], "autodeer.gui.WorkerSignals": [[25, 6, 1, "", "error"], [25, 6, 1, "", "finished"], [25, 6, 1, "", "result"]], "autodeer.gui.__main__": [[23, 4, 1, "", "app"], [23, 4, 1, "", "window"]], "autodeer.gui.autoDEERUI": [[25, 2, 1, "", "RunAdvanedAutoDEER"], [25, 2, 1, "", "RunFullyAutoDEER"], [25, 2, 1, "", "advanced_mode_inputs"], [25, 2, 1, "", "change_LO"], [25, 2, 1, "", "check_CP"], [25, 2, 1, "", "check_T2"], [25, 2, 1, "", "connect_spectrometer"], [25, 2, 1, "", "create_fieldsweep_figure"], [25, 2, 1, "", "create_relax_figure"], [25, 2, 1, "", "create_report"], [25, 2, 1, "", "create_respro_figure"], [25, 2, 1, "", "fsweep_toolbar"], [25, 2, 1, "", "load_epr_file"], [25, 2, 1, "", "load_folder"], [25, 2, 1, "", "load_spectrometer_config"], [25, 2, 1, "", "optimise_pulses"], [25, 2, 1, "", "optimise_pulses_button"], [25, 2, 1, "", "raise_warning"], [25, 2, 1, "", "refresh_T2"], [25, 2, 1, "", "refresh_fieldsweep_after_fit"], [25, 2, 1, "", "refresh_relax"], [25, 2, 1, "", "refresh_relax_figure"], [25, 2, 1, "", "refresh_respro"], [25, 2, 1, "", "relax_toolbar"], [25, 2, 1, "", "respro_toolbar"], [25, 2, 1, "", "save_data"], [25, 2, 1, "", "select_resonator"], [25, 2, 1, "", "set_spectrometer_connected_light"], [25, 2, 1, "", "timeout"], [25, 2, 1, "", "update_T2"], [25, 2, 1, "", "update_fieldsweep"], [25, 2, 1, "", "update_longdeer"], [25, 2, 1, "", "update_optimise_pulses_figure"], [25, 2, 1, "", "update_quickdeer"], [25, 2, 1, "", "update_relax"], [25, 2, 1, "", "update_reptime"], [25, 2, 1, "", "update_respro"]], "autodeer.gui.autoDEER_worker": [[24, 1, 1, "", "autoDEERSignals"], [24, 1, 1, "", "autoDEERWorker"]], "autodeer.gui.autoDEER_worker.autoDEERSignals": [[24, 6, 1, "", "T2_result"], [24, 6, 1, "", "error"], [24, 6, 1, "", "finished"], [24, 6, 1, "", "fsweep_result"], [24, 6, 1, "", "longdeer_result"], [24, 6, 1, "", "longdeer_update"], [24, 6, 1, "", "progress"], [24, 6, 1, "", "quickdeer_result"], [24, 6, 1, "", "quickdeer_update"], [24, 6, 1, "", "relax_result"], [24, 6, 1, "", "reptime_scan_result"], [24, 6, 1, "", "respro_result"], [24, 6, 1, "", "result"], [24, 6, 1, "", "status"], [24, 6, 1, "", "timeout"]], "autodeer.gui.autoDEER_worker.autoDEERWorker": [[24, 2, 1, "", "new_data"], [24, 2, 1, "", "new_pulses"], [24, 2, 1, "", "pause_and_wait"], [24, 2, 1, "", "run"], [24, 2, 1, "", "run_2D_relax"], [24, 2, 1, "", "run_CP_relax"], [24, 2, 1, "", "run_T2_relax"], [24, 2, 1, "", "run_deer"], [24, 2, 1, "", "run_fsweep"], [24, 2, 1, "", "run_long_deer"], [24, 2, 1, "", "run_quick_deer"], [24, 2, 1, "", "run_reptime_opt"], [24, 2, 1, "", "run_respro"], [24, 2, 1, "", "set_noise_mode"], [24, 2, 1, "", "stop"], [24, 2, 1, "", "tune_pulses"], [24, 2, 1, "", "update_LO"], [24, 2, 1, "", "update_deersettings"], [24, 2, 1, "", "update_gyro"], [24, 2, 1, "", "update_reptime"]], "autodeer.gui.log": [[26, 1, 1, "", "LogDialog"], [26, 4, 1, "", "package_directory"]], "autodeer.gui.log.LogDialog": [[26, 2, 1, "", "add_new_entry"], [26, 2, 1, "", "clear_log"], [26, 2, 1, "", "save_log_to_file"], [26, 2, 1, "", "update_log_text"]], "autodeer.gui.main": [[27, 4, 1, "", "SampleConcComboBox_opts"], [27, 3, 1, "", "T2_process"], [27, 1, 1, "", "Worker"], [27, 1, 1, "", "WorkerSignals"], [27, 4, 1, "", "app"], [27, 1, 1, "", "autoDEERUI"], [27, 3, 1, "", "fieldsweep_fit"], [27, 4, 1, "", "package_directory"], [27, 3, 1, "", "relax_process"], [27, 3, 1, "", "respro_process"]], "autodeer.gui.main.Worker": [[27, 2, 1, "", "run"]], "autodeer.gui.main.WorkerSignals": [[27, 6, 1, "", "error"], [27, 6, 1, "", "finished"], [27, 6, 1, "", "progress"], [27, 6, 1, "", "result"]], "autodeer.gui.main.autoDEERUI": [[27, 2, 1, "", "RunAdvanedAutoDEER"], [27, 2, 1, "", "RunFullyAutoDEER"], [27, 2, 1, "", "advanced_mode_inputs"], [27, 2, 1, "", "change_LO"], [27, 2, 1, "", "check_CP"], [27, 2, 1, "", "check_T2"], [27, 2, 1, "", "connect_spectrometer"], [27, 2, 1, "", "create_fieldsweep_figure"], [27, 2, 1, "", "create_relax_figure"], [27, 2, 1, "", "create_report"], [27, 2, 1, "", "create_respro_figure"], [27, 2, 1, "", "fsweep_toolbar"], [27, 2, 1, "", "load_epr_file"], [27, 2, 1, "", "load_folder"], [27, 2, 1, "", "load_spectrometer_config"], [27, 2, 1, "", "optimise_pulses"], [27, 2, 1, "", "optimise_pulses_button"], [27, 2, 1, "", "raise_warning"], [27, 2, 1, "", "refresh_T2"], [27, 2, 1, "", "refresh_fieldsweep_after_fit"], [27, 2, 1, "", "refresh_relax"], [27, 2, 1, "", "refresh_relax_figure"], [27, 2, 1, "", "refresh_respro"], [27, 2, 1, "", "relax_toolbar"], [27, 2, 1, "", "respro_toolbar"], [27, 2, 1, "", "save_data"], [27, 2, 1, "", "select_resonator"], [27, 2, 1, "", "set_spectrometer_connected_light"], [27, 2, 1, "", "timeout"], [27, 2, 1, "", "update_T2"], [27, 2, 1, "", "update_fieldsweep"], [27, 2, 1, "", "update_longdeer"], [27, 2, 1, "", "update_optimise_pulses_figure"], [27, 2, 1, "", "update_quickdeer"], [27, 2, 1, "", "update_relax"], [27, 2, 1, "", "update_reptime"], [27, 2, 1, "", "update_respro"]], "autodeer.gui.quickdeer": [[28, 1, 1, "", "DEERplot"], [28, 4, 1, "", "app"], [28, 3, 1, "", "deeranalysis_process"], [28, 3, 1, "", "get_Vexp"], [28, 4, 1, "", "package_directory"]], "autodeer.gui.quickdeer.DEERplot": [[28, 2, 1, "", "clearLayout"], [28, 2, 1, "", "create_figure"], [28, 2, 1, "", "process_deeranalysis"], [28, 2, 1, "", "refresh_deer"], [28, 2, 1, "", "setup_inputs"], [28, 2, 1, "", "toolbar"], [28, 2, 1, "", "update_analysis_table"], [28, 2, 1, "", "update_figure"], [28, 2, 1, "", "update_fit_result"], [28, 2, 1, "", "update_inputs_from_dataset"]], "autodeer.gui.tools": [[30, 1, 1, "", "Worker"], [30, 1, 1, "", "WorkerSignals"], [30, 3, 1, "", "fill_table"], [30, 3, 1, "", "getCIstring"], [30, 3, 1, "", "get_sequence_rows"], [30, 3, 1, "", "list_str_to_type"], [30, 3, 1, "", "load_epr_file"], [30, 3, 1, "", "param_in_MHz"], [30, 3, 1, "", "param_in_us"], [30, 3, 1, "", "pyqt_table_from_dict"], [30, 3, 1, "", "read_table"], [30, 3, 1, "", "str_to_list_type"], [30, 3, 1, "", "test_SNR"]], "autodeer.gui.tools.Worker": [[30, 2, 1, "", "run"]], "autodeer.gui.tools.WorkerSignals": [[30, 6, 1, "", "error"], [30, 6, 1, "", "finished"], [30, 6, 1, "", "result"]], "autodeer.hardware": [[31, 0, 0, "-", "Bruker_AWG"], [32, 0, 0, "-", "Bruker_MPFU"], [33, 0, 0, "-", "Bruker_tools"], [34, 0, 0, "-", "ETH_awg"], [35, 0, 0, "-", "ETH_awg_load"], [36, 0, 0, "-", "XeprAPI_link"], [37, 0, 0, "-", "dummy"], [38, 0, 0, "-", "dummy_xepr"], [40, 0, 0, "-", "xepr_experiments"]], "autodeer.hardware.Bruker_AWG": [[31, 1, 1, "", "BrukerAWG"], [31, 3, 1, "", "get_specjet_data"], [31, 3, 1, "", "test_if_MPFU_compatability"]], "autodeer.hardware.Bruker_AWG.BrukerAWG": [[31, 2, 1, "", "_launch_complex_thread"], [31, 2, 1, "", "acquire_dataset"], [31, 2, 1, "", "calc_d0"], [31, 2, 1, "", "calc_d0_from_Hahn_Echo"], [31, 2, 1, "", "connect"], [31, 2, 1, "", "isrunning"], [31, 2, 1, "", "launch"], [31, 2, 1, "", "setup"], [31, 2, 1, "", "terminate"], [31, 2, 1, "", "tune_nutation"], [31, 2, 1, "", "tune_pulse"], [31, 2, 1, "", "tune_rectpulse"]], "autodeer.hardware.Bruker_MPFU": [[32, 1, 1, "", "BrukerMPFU"], [32, 3, 1, "", "ELDORtune"], [32, 3, 1, "", "MPFUtune"], [32, 3, 1, "", "_MPFU_channels"], [32, 3, 1, "", "get_specjet_data"], [32, 4, 1, "", "hw_log"], [32, 3, 1, "", "step_parameters"], [32, 3, 1, "", "test_if_MPFU_compatability"], [32, 3, 1, "", "tune_phase"], [32, 3, 1, "", "tune_power"]], "autodeer.hardware.Bruker_MPFU.BrukerMPFU": [[32, 2, 1, "", "_launch_complex_thread"], [32, 2, 1, "", "acquire_dataset"], [32, 2, 1, "", "calc_d0"], [32, 2, 1, "", "calc_d0_from_Hahn_Echo"], [32, 2, 1, "", "connect"], [32, 2, 1, "", "isrunning"], [32, 2, 1, "", "launch"], [32, 2, 1, "", "setup"], [32, 2, 1, "", "terminate"], [32, 2, 1, "", "tune"], [32, 2, 1, "", "tune_pulse"], [32, 2, 1, "", "tune_rectpulse"]], "autodeer.hardware.Bruker_tools": [[33, 4, 1, "", "MODULE_DIR"], [33, 1, 1, "", "PSPhaseCycle"], [33, 1, 1, "", "PSparvar"], [33, 1, 1, "", "PulseSpel"], [33, 3, 1, "", "_addAWGPulse"], [33, 3, 1, "", "build_unique_progtable"], [33, 3, 1, "", "calc_rel_positions"], [33, 3, 1, "", "change_dimensions"], [33, 3, 1, "", "check_variable"], [33, 3, 1, "", "convert_progtable"], [33, 3, 1, "", "get_arange"], [33, 4, 1, "", "header"], [33, 4, 1, "", "possible_delays"], [33, 4, 1, "", "possible_pulses"], [33, 4, 1, "", "possible_vars"], [33, 3, 1, "", "run_general"], [33, 3, 1, "", "write_pulsespel_file"]], "autodeer.hardware.Bruker_tools.PSPhaseCycle": [[33, 2, 1, "", "_MPFU"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "_detect"], [33, 2, 1, "", "_main"]], "autodeer.hardware.Bruker_tools.PSparvar": [[33, 2, 1, "", "checkPulseSpel"]], "autodeer.hardware.Bruker_tools.PulseSpel": [[33, 2, 1, "", "_ExpDefs"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "_addAWGPulse"], [33, 2, 1, "", "_addDef"], [33, 2, 1, "", "_addExp"], [33, 2, 1, "", "_addPhaseCycle"], [33, 2, 1, "", "_addScanLoop"], [33, 2, 1, "", "_check_sequence"], [33, 2, 1, "", "_cmpl_Exp"], [33, 2, 1, "", "_cmpl_def"], [33, 2, 1, "", "_new_delay"], [33, 2, 1, "", "_new_pulse"], [33, 2, 1, "", "_new_var"], [33, 2, 1, "", "save"]], "autodeer.hardware.ETH_awg": [[34, 1, 1, "", "ETH_awg_interface"], [34, 3, 1, "", "bg_thread"], [34, 4, 1, "", "log"]], "autodeer.hardware.ETH_awg.ETH_awg_interface": [[34, 2, 1, "", "_build_exp_struct"], [34, 2, 1, "", "_build_parvar"], [34, 2, 1, "", "_build_phase_cycle"], [34, 2, 1, "", "_build_pulse"], [34, 2, 1, "", "acquire_dataset"], [34, 2, 1, "", "acquire_dataset_from_matlab"], [34, 2, 1, "", "connect"], [34, 2, 1, "", "isrunning"], [34, 2, 1, "", "launch"], [34, 2, 1, "", "launch_long"], [34, 2, 1, "", "launch_normal"], [34, 5, 1, "", "savefolder"], [34, 2, 1, "", "terminate"], [34, 2, 1, "", "tune"], [34, 2, 1, "", "tune_pulse"], [34, 2, 1, "", "tune_rectpulse"]], "autodeer.hardware.ETH_awg_load": [[35, 3, 1, "", "calc_percieved_freq"], [35, 3, 1, "", "digitally_upconvert"], [35, 3, 1, "", "find_max_pulse_length"], [35, 3, 1, "", "match_filter_dc"], [35, 3, 1, "", "scipy_filter_dc"], [35, 3, 1, "", "uwb_eval_match"], [35, 3, 1, "", "uwb_load"]], "autodeer.hardware.XeprAPI_link": [[36, 1, 1, "", "XeprAPILink"], [36, 4, 1, "", "hw_log"], [36, 4, 1, "", "xepr_path"]], "autodeer.hardware.XeprAPI_link.XeprAPILink": [[36, 2, 1, "", "_get_Xepr_global"], [36, 2, 1, "", "_get_cur_exp_global"], [36, 2, 1, "", "_set_Xepr_global"], [36, 2, 1, "", "_set_cur_exp_global"], [36, 2, 1, "", "_set_cur_exp_param"], [36, 2, 1, "", "_set_hidden_param"], [36, 2, 1, "", "_xepr_retry"], [36, 2, 1, "", "abort_exp"], [36, 2, 1, "", "acquire_dataset"], [36, 2, 1, "", "acquire_scan"], [36, 2, 1, "", "acquire_scan_2d"], [36, 2, 1, "", "acquire_scan_at"], [36, 2, 1, "", "compile_PulseSpel_def"], [36, 2, 1, "", "compile_PulseSpel_prg"], [36, 2, 1, "", "connect"], [36, 2, 1, "", "find_Xepr"], [36, 2, 1, "", "find_cur_exp"], [36, 2, 1, "", "find_hidden"], [36, 2, 1, "", "get_Acquisition_mode"], [36, 2, 1, "", "get_ELDOR_freq"], [36, 2, 1, "", "get_MW_amp"], [36, 2, 1, "", "get_PhaseCycle"], [36, 2, 1, "", "get_PulseSpel_def_filename"], [36, 2, 1, "", "get_PulseSpel_def_filepath"], [36, 2, 1, "", "get_PulseSpel_exp_filename"], [36, 2, 1, "", "get_PulseSpel_exp_filepath"], [36, 2, 1, "", "get_PulseSpel_experiment"], [36, 2, 1, "", "get_PulseSpel_phase_cycling"], [36, 2, 1, "", "get_ReplaceMode"], [36, 2, 1, "", "get_attenuator"], [36, 2, 1, "", "get_config_file"], [36, 2, 1, "", "get_counterfreq"], [36, 2, 1, "", "get_field"], [36, 2, 1, "", "get_freq"], [36, 2, 1, "", "get_hidden_param"], [36, 2, 1, "", "get_param"], [36, 2, 1, "", "get_phase"], [36, 2, 1, "", "get_spec_config"], [36, 2, 1, "", "get_sweep_width"], [36, 2, 1, "", "get_video_bandwidth"], [36, 2, 1, "", "get_video_gain"], [36, 2, 1, "", "is_exp_running"], [36, 2, 1, "", "pause_exp"], [36, 2, 1, "", "rerun_exp"], [36, 2, 1, "", "run_exp"], [36, 2, 1, "", "save_PulseSpel_def"], [36, 2, 1, "", "save_PulseSpel_exp"], [36, 2, 1, "", "set_Acquisition_mode"], [36, 2, 1, "", "set_ELDOR_freq"], [36, 2, 1, "", "set_MW_amp"], [36, 2, 1, "", "set_PhaseCycle"], [36, 2, 1, "", "set_PulseSpel_def_filepath"], [36, 2, 1, "", "set_PulseSpel_exp_filepath"], [36, 2, 1, "", "set_PulseSpel_experiment"], [36, 2, 1, "", "set_PulseSpel_phase_cycling"], [36, 2, 1, "", "set_PulseSpel_var"], [36, 2, 1, "", "set_ReplaceMode"], [36, 2, 1, "", "set_attenuator"], [36, 2, 1, "", "set_config_file"], [36, 2, 1, "", "set_field"], [36, 2, 1, "", "set_freq"], [36, 2, 1, "", "set_hidden_param"], [36, 2, 1, "", "set_param"], [36, 2, 1, "", "set_phase"], [36, 2, 1, "", "set_sweep_width"], [36, 2, 1, "", "set_video_bandwidth"], [36, 2, 1, "", "set_video_gain"], [36, 2, 1, "", "stop_exp"], [36, 2, 1, "", "xepr_save"]], "autodeer.hardware.dummy": [[37, 3, 1, "", "_gen_ESEEM"], [37, 3, 1, "", "_similate_respro"], [37, 3, 1, "", "_simulate_CP"], [37, 3, 1, "", "_simulate_T2"], [37, 3, 1, "", "_simulate_deer"], [37, 3, 1, "", "_simulate_field_sweep"], [37, 3, 1, "", "_simulate_reptimescan"], [37, 3, 1, "", "add_noise"], [37, 3, 1, "", "add_phaseshift"], [37, 1, 1, "", "dummyInterface"], [37, 4, 1, "", "hw_log"], [37, 4, 1, "", "rng"], [37, 3, 1, "", "val_in_ns"], [37, 3, 1, "", "val_in_us"]], "autodeer.hardware.dummy.dummyInterface": [[37, 2, 1, "", "acquire_dataset"], [37, 2, 1, "", "isrunning"], [37, 2, 1, "", "launch"], [37, 2, 1, "", "terminate"], [37, 2, 1, "", "tune_pulse"], [37, 2, 1, "", "tune_rectpulse"]], "autodeer.hardware.dummy_xepr": [[38, 1, 1, "", "dummy_api"], [38, 1, 1, "", "dummy_cur_exp"], [38, 1, 1, "", "dummy_dataset"], [38, 1, 1, "", "dummy_hidden"], [38, 1, 1, "", "dummy_param"], [38, 1, 1, "", "dummy_xepr"], [38, 4, 1, "", "hardware_meta"], [38, 4, 1, "", "hw_log"]], "autodeer.hardware.dummy_xepr.dummy_api": [[38, 2, 1, "", "abort_exp"], [38, 2, 1, "", "acquire_scan"], [38, 2, 1, "", "acquire_scan_2d"], [38, 2, 1, "", "acquire_scan_at"], [38, 2, 1, "", "compile_PulseSpel_def"], [38, 2, 1, "", "compile_PulseSpel_prg"], [38, 2, 1, "", "find_Xepr"], [38, 2, 1, "", "is_exp_running"], [38, 2, 1, "", "run_exp"], [38, 2, 1, "", "set_PulseSpel_var"], [38, 2, 1, "", "stop_exp"]], "autodeer.hardware.dummy_xepr.dummy_cur_exp": [[38, 2, 1, "", "__getitem__"], [38, 2, 1, "", "aqExpRun"], [38, 2, 1, "", "getParam"]], "autodeer.hardware.dummy_xepr.dummy_hidden": [[38, 2, 1, "", "__getitem__"], [38, 2, 1, "", "getParam"]], "autodeer.hardware.dummy_xepr.dummy_param": [[38, 5, 1, "", "value"]], "autodeer.hardware.dummy_xepr.dummy_xepr": [[38, 1, 1, "", "XeprCmds"], [38, 2, 1, "", "XeprDataset"], [38, 2, 1, "", "XeprExperiment"]], "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds": [[38, 2, 1, "", "aqExpSelect"], [38, 2, 1, "", "aqPgCompile"], [38, 2, 1, "", "aqPgDefLoad"], [38, 2, 1, "", "aqPgDefSaveAs"], [38, 2, 1, "", "aqPgLoad"], [38, 2, 1, "", "aqPgSaveAs"], [38, 2, 1, "", "aqPgShowPrg"], [38, 2, 1, "", "vpSave"]], "autodeer.hardware.xepr_experiments": [[40, 3, 1, "", "CP_run"], [40, 3, 1, "", "CalibrateFreq"], [40, 1, 1, "", "DEER"], [40, 3, 1, "", "DEER5p_run"], [40, 1, 1, "", "ELDORtune"], [40, 4, 1, "", "MODULE_DIR"], [40, 1, 1, "", "MPFUtune"], [40, 1, 1, "", "PulseProfile"], [40, 3, 1, "", "get_nutations"]], "autodeer.hardware.xepr_experiments.DEER": [[40, 2, 1, "", "run_4p"], [40, 2, 1, "", "run_5p"], [40, 2, 1, "", "run_CP"]], "autodeer.hardware.xepr_experiments.ELDORtune": [[40, 2, 1, "", "_get_exp"], [40, 2, 1, "", "_setup_exp"], [40, 2, 1, "", "find_min"], [40, 2, 1, "", "tune"]], "autodeer.hardware.xepr_experiments.MPFUtune": [[40, 2, 1, "", "_setup_echo"], [40, 2, 1, "", "calc_d0"], [40, 2, 1, "", "tune"], [40, 2, 1, "", "tune_phase"], [40, 2, 1, "", "tune_power"]], "autodeer.hardware.xepr_experiments.PulseProfile": [[40, 2, 1, "", "_freq_sweep"], [40, 2, 1, "", "_setup_exp"]], "autodeer.pulses": [[42, 1, 1, "", "ChirpPulse"], [42, 1, 1, "", "Delay"], [42, 1, 1, "", "Detection"], [42, 1, 1, "", "GaussianPulse"], [42, 1, 1, "", "HSPulse"], [42, 1, 1, "", "Pulse"], [42, 1, 1, "", "RectPulse"], [42, 1, 1, "", "SincPulse"], [42, 3, 1, "", "build_default_pulses"]], "autodeer.pulses.ChirpPulse": [[42, 2, 1, "", "func"]], "autodeer.pulses.GaussianPulse": [[42, 2, 1, "", "func"]], "autodeer.pulses.HSPulse": [[42, 2, 1, "", "func"]], "autodeer.pulses.Pulse": [[42, 2, 1, "", "__str__"], [42, 2, 1, "", "_addPhaseCycle"], [42, 2, 1, "", "_buildFMAM"], [42, 2, 1, "", "_calc_fft"], [42, 2, 1, "", "_from_dict"], [42, 2, 1, "", "_from_json"], [42, 2, 1, "", "_pcyc_str"], [42, 2, 1, "", "_to_dict"], [42, 2, 1, "", "_to_json"], [42, 2, 1, "", "build_shape"], [42, 2, 1, "", "build_table"], [42, 2, 1, "", "copy"], [42, 2, 1, "", "exciteprofile"], [42, 2, 1, "", "isDelayFocused"], [42, 2, 1, "", "isPulseFocused"], [42, 2, 1, "", "is_static"], [42, 2, 1, "", "load"], [42, 2, 1, "", "plot"], [42, 2, 1, "", "plot_fft"], [42, 2, 1, "", "save"]], "autodeer.pulses.RectPulse": [[42, 2, 1, "", "func"]], "autodeer.pulses.SincPulse": [[42, 2, 1, "", "func"]], "autodeer.reporter": [[43, 1, 1, "", "Reporter"], [43, 1, 1, "", "SvgFlowable"], [43, 3, 1, "", "combo_figure"], [43, 3, 1, "", "create_report"], [43, 4, 1, "", "package_dir"], [43, 4, 1, "", "styles"]], "autodeer.reporter.Reporter": [[43, 2, 1, "", "_build"], [43, 2, 1, "", "add_code_block"], [43, 2, 1, "", "add_figure"], [43, 2, 1, "", "add_new_section"], [43, 2, 1, "", "add_page_break"], [43, 2, 1, "", "add_space"], [43, 2, 1, "", "add_table"], [43, 2, 1, "", "add_text"], [43, 2, 1, "", "add_title"], [43, 2, 1, "", "footer"], [43, 2, 1, "", "header"]], "autodeer.reporter.SvgFlowable": [[43, 2, 1, "", "draw"], [43, 2, 1, "", "wrap"]], "autodeer.sequences": [[44, 1, 1, "", "CarrPurcellSequence"], [44, 1, 1, "", "DEERSequence"], [44, 1, 1, "", "FieldSweepSequence"], [44, 1, 1, "", "HahnEchoSequence"], [44, 1, 1, "", "RefocusedEcho2DSequence"], [44, 1, 1, "", "ReptimeScan"], [44, 1, 1, "", "ResonatorProfileSequence"], [44, 1, 1, "", "Sequence"], [44, 1, 1, "", "T2RelaxationSequence"], [44, 1, 1, "", "TWTProfileSequence"]], "autodeer.sequences.CarrPurcellSequence": [[44, 2, 1, "", "_build_sequence"]], "autodeer.sequences.DEERSequence": [[44, 2, 1, "", "add_ESEEM_avg"], [44, 2, 1, "", "five_pulse"], [44, 2, 1, "", "four_pulse"], [44, 2, 1, "", "nDEER_CP"], [44, 2, 1, "", "select_pcyc"], [44, 2, 1, "", "seven_pulse"], [44, 2, 1, "", "simulate"], [44, 2, 1, "", "three_pulse"]], "autodeer.sequences.RefocusedEcho2DSequence": [[44, 2, 1, "", "_build_sequence"]], "autodeer.sequences.ResonatorProfileSequence": [[44, 2, 1, "", "_build_sequence"]], "autodeer.sequences.Sequence": [[44, 2, 1, "", "__str__"], [44, 2, 1, "", "_buildPhaseCycle"], [44, 2, 1, "", "_checkRect"], [44, 2, 1, "", "_convert_to_delay"], [44, 2, 1, "", "_convert_to_pulses"], [44, 2, 1, "", "_estimate_time"], [44, 2, 1, "", "_from_dict"], [44, 2, 1, "", "_from_json"], [44, 2, 1, "", "_to_dict"], [44, 2, 1, "", "_to_json"], [44, 2, 1, "", "addPulse"], [44, 2, 1, "", "convert"], [44, 2, 1, "", "copy"], [44, 2, 1, "", "evolution"], [44, 2, 1, "", "isDelayFocused"], [44, 2, 1, "", "isPulseFocused"], [44, 2, 1, "", "load"], [44, 2, 1, "", "plot"], [44, 2, 1, "", "plot_pulse_exc"], [44, 2, 1, "", "save"], [44, 5, 1, "", "seqtable_steps"], [44, 2, 1, "", "shift_detfreq_to_zero"]], "autodeer.sequences.TWTProfileSequence": [[44, 2, 1, "", "_build_sequence"]], "autodeer.tools": [[45, 3, 1, "", "eprload"], [45, 4, 1, "", "log"], [45, 3, 1, "", "progress_bar"], [45, 3, 1, "", "progress_bar_frac"]], "autodeer.utils": [[46, 3, 1, "", "autoEPRDecoder"], [46, 3, 1, "", "build_table"], [46, 3, 1, "", "gcd"], [46, 3, 1, "", "round_step"], [46, 3, 1, "", "save_file"], [46, 3, 1, "", "sop"], [46, 3, 1, "", "transpose_dict_of_list"], [46, 3, 1, "", "transpose_list_of_dicts"], [46, 3, 1, "", "val_in_ns"], [46, 3, 1, "", "val_in_us"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data", "5": "py:property", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"build": 0, "document": 0, "instal": [0, 51, 52], "packag": [0, 25, 41], "doc": [0, 49], "api": [1, 47, 49], "refer": [1, 41, 42, 46, 47, 54], "autod": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 57, 67], "deer_analysi": 12, "modul": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49], "content": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46], "function": [12, 13, 14, 15, 16, 22, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 45, 46, 49], "attribut": [12, 15, 21, 26, 27, 28, 32, 33, 34, 36, 37, 38, 40, 41, 43, 45], "method": [12, 41], "fieldsweep": [13, 50], "class": [13, 14, 15, 16, 17, 19, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 49], "log": [14, 26, 65], "relax": [15, 50], "respro": 16, "twod_experi": 17, "_version": 18, "color": 20, "criteria": [21, 49], "dataset": 22, "gui": [23, 24, 25, 26, 27, 28, 29, 30, 55, 67], "__main__": 23, "autodeer_work": 24, "submodul": [25, 39, 41], "main": [27, 49], "quickdeer": 28, "test_main": 29, "tool": [30, 45], "hardwar": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "bruker_awg": 31, "bruker_mpfu": 32, "bruker_tool": 33, "eth_awg": 34, "eth_awg_load": 35, "xeprapi_link": 36, "dummi": 37, "dummy_xepr": 38, "xepr_experi": 40, "subpackag": 41, "puls": [42, 49, 54, 62], "report": [43, 67], "sequenc": [44, 49, 50, 60, 62], "util": [46, 49], "welcom": 48, "": 48, "kei": 48, "featur": [48, 63], "analysi": [49, 60, 67], "termin": 49, "interfac": [49, 53, 55, 58, 59, 61], "plot": 49, "optimis": [49, 50], "i": [49, 62], "o": 49, "The": [50, 52], "autom": 50, "algorithum": 50, "step": [50, 60], "explain": 50, "1": [50, 60, 67], "user": 50, "input": 50, "2": [50, 60, 67], "3": [50, 60, 67], "srt": 50, "scan": 50, "4": [50, 54, 60, 67], "reson": [50, 53], "profil": [50, 53], "5": [50, 54, 60], "studi": 50, "6": 50, "deer": [50, 53, 54], "paramet": 50, "7": [50, 52, 54, 68], "initi": 50, "experi": [50, 55, 67], "8": 50, "final": 50, "limit": 50, "from": 51, "sourc": 51, "python": 52, "window": 52, "cento": 52, "solut": 52, "faq": 52, "jupyt": 53, "setup": 53, "field": 53, "sweep": 53, "variant": 54, "select": 54, "version": [54, 68], "ndeer": 54, "phase": 54, "cycl": 54, "connect": [55, 67], "spectromet": [55, 67], "start": [55, 58, 60, 65, 67], "an": [55, 67], "fulli": 55, "automat": 55, "recommend": 55, "advanc": [55, 67], "mode": [55, 67], "dure": 55, "after": 55, "configur": [56, 58], "file": [56, 58], "overview": 56, "exampl": 56, "brukermpfu": 56, "ethawg": 56, "bruker": [58, 61], "get": [58, 60], "creat": [59, 62], "custom": [59, 61, 62], "set": 60, "up": 60, "your": [60, 62], "script": 60, "defin": 60, "tune": 60, "stop": 60, "data": 60, "next": 60, "first": 62, "us": 62, "shape": 62, "chirp": 62, "what": 62, "current": 62, "support": 62, "autoepr": 63, "includ": 63, "contribut": 64, "guid": 64, "level": 65, "rollov": 65, "call": 65, "logger": 65, "post": 65, "messag": 65, "develop": 66, "view": 67, "print": 67, "pdf": 67, "lab": 67, "releas": 68, "note": 68, "0": 68, "2024": 68, "04": 68, "01": 68, "tutori": 69}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Building the documentation": [[0, "building-the-documentation"]], "Installing packages": [[0, "installing-packages"]], "Building docs": [[0, "building-docs"]], "API Reference": [[1, "api-reference"], [47, "api-reference"]], "autodeer.DEER_analysis": [[12, "module-autodeer.DEER_analysis"]], "Module Contents": [[12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"]], "Functions": [[12, "functions"], [13, "functions"], [14, "functions"], [15, "functions"], [16, "functions"], [22, "functions"], [25, "functions"], [27, "functions"], [28, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [40, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [46, "functions"], [49, "functions"]], "Attributes": [[12, "attributes"], [15, "attributes"], [21, "attributes"], [26, "attributes"], [27, "attributes"], [28, "attributes"], [32, "attributes"], [33, "attributes"], [34, "attributes"], [36, "attributes"], [37, "attributes"], [38, "attributes"], [40, "attributes"], [41, "attributes"], [43, "attributes"], [45, "attributes"]], "Methods": [[12, "methods"], [41, "methods"]], "autodeer.FieldSweep": [[13, "module-autodeer.FieldSweep"]], "Classes": [[13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [49, "classes"]], "autodeer.Logging": [[14, "module-autodeer.Logging"]], "autodeer.Relaxation": [[15, "module-autodeer.Relaxation"]], "autodeer.ResPro": [[16, "module-autodeer.ResPro"]], "autodeer.TwoD_Experiment": [[17, "module-autodeer.TwoD_Experiment"]], "autodeer._version": [[18, "module-autodeer._version"]], "autodeer.classes": [[19, "module-autodeer.classes"]], "autodeer.colors": [[20, "module-autodeer.colors"]], "autodeer.criteria": [[21, "module-autodeer.criteria"]], "autodeer.dataset": [[22, "module-autodeer.dataset"]], "autodeer.gui.__main__": [[23, "module-autodeer.gui.__main__"]], "autodeer.gui.autoDEER_worker": [[24, "module-autodeer.gui.autoDEER_worker"]], "autodeer.gui": [[25, "module-autodeer.gui"]], "Submodules": [[25, "submodules"], [39, "submodules"], [41, "submodules"]], "Package Contents": [[25, "package-contents"], [41, "package-contents"]], "autodeer.gui.log": [[26, "module-autodeer.gui.log"]], "autodeer.gui.main": [[27, "module-autodeer.gui.main"]], "autodeer.gui.quickdeer": [[28, "module-autodeer.gui.quickdeer"]], "autodeer.gui.test_main": [[29, "module-autodeer.gui.test_main"]], "autodeer.gui.tools": [[30, "module-autodeer.gui.tools"]], "autodeer.hardware.Bruker_AWG": [[31, "module-autodeer.hardware.Bruker_AWG"]], "autodeer.hardware.Bruker_MPFU": [[32, "module-autodeer.hardware.Bruker_MPFU"]], "autodeer.hardware.Bruker_tools": [[33, "module-autodeer.hardware.Bruker_tools"]], "autodeer.hardware.ETH_awg": [[34, "module-autodeer.hardware.ETH_awg"]], "autodeer.hardware.ETH_awg_load": [[35, "module-autodeer.hardware.ETH_awg_load"]], "autodeer.hardware.XeprAPI_link": [[36, "module-autodeer.hardware.XeprAPI_link"]], "autodeer.hardware.dummy": [[37, "module-autodeer.hardware.dummy"]], "autodeer.hardware.dummy_xepr": [[38, "module-autodeer.hardware.dummy_xepr"]], "autodeer.hardware": [[39, "module-autodeer.hardware"]], "autodeer.hardware.xepr_experiments": [[40, "module-autodeer.hardware.xepr_experiments"]], "autodeer": [[41, "module-autodeer"]], "Subpackages": [[41, "subpackages"]], "References:": [[41, "references"], [42, "references"], [46, "references"]], "autodeer.pulses": [[42, "module-autodeer.pulses"]], "autodeer.reporter": [[43, "module-autodeer.reporter"]], "autodeer.sequences": [[44, "module-autodeer.sequences"]], "autodeer.tools": [[45, "module-autodeer.tools"]], "autodeer.utils": [[46, "module-autodeer.utils"]], "Welcome to autoDEER!": [[48, "welcome-to-autodeer"]], "autoDEER\u2019s Key Features": [[48, "autodeer-s-key-features"]], "API doc": [[49, "api-doc"]], "Main Classes": [[49, "main-classes"]], "Analysis Modules": [[49, "analysis-modules"]], "Sequences": [[49, "sequences"]], "Pulses": [[49, "pulses"]], "Termination Criteria": [[49, "termination-criteria"]], "Utilities": [[49, "utilities"], [49, "id4"]], "Interfaces": [[49, "interfaces"], [61, "interfaces"]], "Plotting": [[49, "plotting"]], "Optimisation": [[49, "optimisation"]], "I/O": [[49, "i-o"]], "The Automated Algorithum": [[50, "the-automated-algorithum"]], "Steps Explained": [[50, "steps-explained"]], "1. User Inputs": [[50, "user-inputs"]], "2. Fieldsweep": [[50, "fieldsweep"]], "3. SRT Scan": [[50, "srt-scan"]], "4. Resonator Profile": [[50, "resonator-profile"]], "5. Relaxation Studies": [[50, "relaxation-studies"]], "6. Optimising DEER Sequence Parameters": [[50, "optimising-deer-sequence-parameters"]], "Parameter": [[50, "parameter"]], "7. Initial DEER Experiment": [[50, "initial-deer-experiment"]], "8. Final DEER Experiment": [[50, "final-deer-experiment"]], "Limitations": [[50, "limitations"]], "Installation": [[51, "installation"]], "Installing from source": [[51, "installing-from-source"]], "Installing Python": [[52, "installing-python"]], "Installing Python Windows": [[52, "installing-python-windows"]], "Installing Python CentOS 7": [[52, "installing-python-centos-7"]], "The solution": [[52, "the-solution"]], "FAQs": [[52, "faqs"]], "Jupyter Interface": [[53, "jupyter-interface"]], "Setup": [[53, "setup"]], "Field Sweep": [[53, "field-sweep"]], "Resonator Profile": [[53, "resonator-profile"]], "DEER": [[53, "deer"]], "DEER Variants": [[54, "deer-variants"]], "Selecting a version": [[54, "selecting-a-version"]], "DEER versions": [[54, "deer-versions"]], "4-pulse DEER": [[54, "pulse-deer"]], "5-pulse DEER": [[54, "id1"]], "7-pulse DEER": [[54, "id2"]], "nDEER": [[54, "ndeer"]], "Selecting a phase cycle": [[54, "selecting-a-phase-cycle"]], "References": [[54, "references"]], "GUI Interface": [[55, "gui-interface"]], "Connecting to a spectrometer": [[55, "connecting-to-a-spectrometer"]], "Starting an experiment": [[55, "starting-an-experiment"]], "Fully automatic experiment (recommended)": [[55, "fully-automatic-experiment-recommended"]], "Advanced Mode": [[55, "advanced-mode"], [67, "advanced-mode"]], "During an Experiment": [[55, "during-an-experiment"]], "After an Experiment": [[55, "after-an-experiment"]], "Configuration File": [[56, "configuration-file"]], "Overview": [[56, "overview"]], "Examples": [[56, "examples"]], "BrukerMPFU": [[56, "brukermpfu"]], "ETHAWG": [[56, "ethawg"]], "autoDEER": [[57, "autodeer"]], "Bruker Interface": [[58, "bruker-interface"], [61, "bruker-interface"]], "Configuration file": [[58, "configuration-file"]], "Getting started": [[58, "getting-started"]], "Creating a custom interface": [[59, "creating-a-custom-interface"]], "Getting Started": [[60, "getting-started"]], "Setting up your script": [[60, "setting-up-your-script"]], "1. Defining the sequence": [[60, "defining-the-sequence"]], "2. Tuning for the sequence": [[60, "tuning-for-the-sequence"]], "3. Starting the sequence": [[60, "starting-the-sequence"]], "4. Stopping the sequence": [[60, "stopping-the-sequence"]], "5. Data analysis": [[60, "data-analysis"]], "Next Steps": [[60, "next-steps"]], "Custom Interface": [[61, "custom-interface"]], "Creating a Custom Sequence": [[62, "creating-a-custom-sequence"]], "Creating your first sequence": [[62, "creating-your-first-sequence"]], "Using Shaped and Chirped pulses": [[62, "using-shaped-and-chirped-pulses"]], "Chirped pulses": [[62, "chirped-pulses"]], "Custom pulses": [[62, "custom-pulses"]], "What is not currently supported?": [[62, "what-is-not-currently-supported"]], "autoEPR": [[63, "autoepr"]], "Features included in autoEPR:": [[63, "features-included-in-autoepr"]], "Contributing Guide": [[64, "contributing-guide"]], "Logging:": [[65, "logging"]], "Logging Levels": [[65, "logging-levels"]], "Logs": [[65, "logs"]], "Rollover": [[65, "rollover"]], "Calling a Logger": [[65, "calling-a-logger"]], "Posting a log message": [[65, "posting-a-log-message"]], "Starting the logger": [[65, "starting-the-logger"]], "Developing": [[66, "developing"]], "autoDEER GUI": [[67, "autodeer-gui"]], "1. Connecting to the spectrometer": [[67, "connecting-to-the-spectrometer"]], "2. Starting an autoDEER Experiment": [[67, "starting-an-autodeer-experiment"]], "3. Viewing the analysis": [[67, "viewing-the-analysis"]], "4. Printing a PDF lab-report": [[67, "printing-a-pdf-lab-report"]], "Release Notes": [[68, "release-notes"]], "Version 0.7.0 (2024-04-01):": [[68, "version-0-7-0-2024-04-01"]], "Tutorial": [[69, "tutorial"]]}, "indexentries": {"deeranalysis() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.DEERanalysis"]], "deeranalysis_plot() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.DEERanalysis_plot"]], "deeranalysis_plot_pub() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.DEERanalysis_plot_pub"]], "identifyroi() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.IdentifyROI"]], "module_dir (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.MODULE_DIR"]], "autodeer.deer_analysis": [[12, "module-autodeer.DEER_analysis"]], "background_func() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.background_func"]], "build__lowpass_butter_filter() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.build__lowpass_butter_filter"]], "calc_correction_factor() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.calc_correction_factor"]], "calc_identifiability() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.calc_identifiability"]], "find_longest_pulse() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.find_longest_pulse"]], "functional() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.functional"]], "log (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.log"]], "module": [[12, "module-autodeer.DEER_analysis"], [13, "module-autodeer.FieldSweep"], [14, "module-autodeer.Logging"], [15, "module-autodeer.Relaxation"], [16, "module-autodeer.ResPro"], [17, "module-autodeer.TwoD_Experiment"], [18, "module-autodeer._version"], [19, "module-autodeer.classes"], [20, "module-autodeer.colors"], [21, "module-autodeer.criteria"], [22, "module-autodeer.dataset"], [23, "module-autodeer.gui.__main__"], [24, "module-autodeer.gui.autoDEER_worker"], [25, "module-autodeer.gui"], [26, "module-autodeer.gui.log"], [27, "module-autodeer.gui.main"], [28, "module-autodeer.gui.quickdeer"], [29, "module-autodeer.gui.test_main"], [30, "module-autodeer.gui.tools"], [31, "module-autodeer.hardware.Bruker_AWG"], [32, "module-autodeer.hardware.Bruker_MPFU"], [33, "module-autodeer.hardware.Bruker_tools"], [34, "module-autodeer.hardware.ETH_awg"], [35, "module-autodeer.hardware.ETH_awg_load"], [36, "module-autodeer.hardware.XeprAPI_link"], [37, "module-autodeer.hardware.dummy"], [38, "module-autodeer.hardware.dummy_xepr"], [39, "module-autodeer.hardware"], [40, "module-autodeer.hardware.xepr_experiments"], [41, "module-autodeer"], [42, "module-autodeer.pulses"], [43, "module-autodeer.reporter"], [44, "module-autodeer.sequences"], [45, "module-autodeer.tools"], [46, "module-autodeer.utils"]], "normalise_01() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.normalise_01"]], "optimise_pulses() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.optimise_pulses"]], "plot_overlap() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.plot_overlap"]], "remove_echo() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.remove_echo"]], "resample_and_shift_vector() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.resample_and_shift_vector"]], "shift_pulse_freq() (in module autodeer.deer_analysis)": [[12, "autodeer.DEER_analysis.shift_pulse_freq"]], "fieldsweepanalysis (class in autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.FieldSweepAnalysis"]], "spinsystem (class in autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.SpinSystem"]], "autodeer.fieldsweep": [[13, "module-autodeer.FieldSweep"]], "build_spectrum() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.build_spectrum"]], "calc_gyro() (autodeer.fieldsweep.fieldsweepanalysis method)": [[13, "autodeer.FieldSweep.FieldSweepAnalysis.calc_gyro"]], "calc_noise_level() (autodeer.fieldsweep.fieldsweepanalysis method)": [[13, "autodeer.FieldSweep.FieldSweepAnalysis.calc_noise_level"]], "create_nmodel() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.create_Nmodel"]], "erot() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.erot"]], "eyekron() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.eyekron"]], "find_max() (autodeer.fieldsweep.fieldsweepanalysis method)": [[13, "autodeer.FieldSweep.FieldSweepAnalysis.find_max"]], "fit() (autodeer.fieldsweep.fieldsweepanalysis method)": [[13, "autodeer.FieldSweep.FieldSweepAnalysis.fit"]], "ham() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.ham"]], "ham_ez() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.ham_ez"]], "ham_nz() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.ham_nz"]], "kroneye() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.kroneye"]], "plot() (autodeer.fieldsweep.fieldsweepanalysis method)": [[13, "autodeer.FieldSweep.FieldSweepAnalysis.plot"]], "resfields() (in module autodeer.fieldsweep)": [[13, "autodeer.FieldSweep.resfields"]], "dictformater (class in autodeer.logging)": [[14, "autodeer.Logging.DictFormater"]], "qtloghandler (class in autodeer.logging)": [[14, "autodeer.Logging.QtLogHandler"]], "autodeer.logging": [[14, "module-autodeer.Logging"]], "change_log_level() (in module autodeer.logging)": [[14, "autodeer.Logging.change_log_level"]], "emit() (autodeer.logging.qtloghandler method)": [[14, "autodeer.Logging.QtLogHandler.emit"]], "format() (autodeer.logging.dictformater method)": [[14, "autodeer.Logging.DictFormater.format"]], "setup_logs() (in module autodeer.logging)": [[14, "autodeer.Logging.setup_logs"]], "signal (autodeer.logging.qtloghandler attribute)": [[14, "autodeer.Logging.QtLogHandler.signal"]], "carrpurcellanalysis (class in autodeer.relaxation)": [[15, "autodeer.Relaxation.CarrPurcellAnalysis"]], "reptimeanalysis (class in autodeer.relaxation)": [[15, "autodeer.Relaxation.ReptimeAnalysis"]], "autodeer.relaxation": [[15, "module-autodeer.Relaxation"]], "calc_optimal_reptime() (autodeer.relaxation.reptimeanalysis method)": [[15, "autodeer.Relaxation.ReptimeAnalysis.calc_optimal_reptime"]], "check_decay() (autodeer.relaxation.carrpurcellanalysis method)": [[15, "autodeer.Relaxation.CarrPurcellAnalysis.check_decay"]], "cmap (in module autodeer.relaxation)": [[15, "autodeer.Relaxation.cmap"]], "detect_eseem() (in module autodeer.relaxation)": [[15, "autodeer.Relaxation.detect_ESEEM"]], "find_optimal() (autodeer.relaxation.carrpurcellanalysis method)": [[15, "autodeer.Relaxation.CarrPurcellAnalysis.find_optimal"]], "fit() (autodeer.relaxation.carrpurcellanalysis method)": [[15, "autodeer.Relaxation.CarrPurcellAnalysis.fit"]], "fit() (autodeer.relaxation.reptimeanalysis method)": [[15, "autodeer.Relaxation.ReptimeAnalysis.fit"]], "plot() (autodeer.relaxation.carrpurcellanalysis method)": [[15, "autodeer.Relaxation.CarrPurcellAnalysis.plot"]], "plot() (autodeer.relaxation.reptimeanalysis method)": [[15, "autodeer.Relaxation.ReptimeAnalysis.plot"]], "plot_1drelax() (in module autodeer.relaxation)": [[15, "autodeer.Relaxation.plot_1Drelax"]], "bspline_extra() (in module autodeer.respro)": [[16, "autodeer.ResPro.BSpline_extra"]], "resonatorprofileanalysis (class in autodeer.respro)": [[16, "autodeer.ResPro.ResonatorProfileAnalysis"]], "_process_fit() (autodeer.respro.resonatorprofileanalysis method)": [[16, "autodeer.ResPro.ResonatorProfileAnalysis._process_fit"]], "autodeer.respro": [[16, "module-autodeer.ResPro"]], "calc_overlap() (in module autodeer.respro)": [[16, "autodeer.ResPro.calc_overlap"]], "ceil() (in module autodeer.respro)": [[16, "autodeer.ResPro.ceil"]], "fit() (autodeer.respro.resonatorprofileanalysis method)": [[16, "autodeer.ResPro.ResonatorProfileAnalysis.fit"]], "floor() (in module autodeer.respro)": [[16, "autodeer.ResPro.floor"]], "optimise_spectra_position() (in module autodeer.respro)": [[16, "autodeer.ResPro.optimise_spectra_position"]], "plot() (autodeer.respro.resonatorprofileanalysis method)": [[16, "autodeer.ResPro.ResonatorProfileAnalysis.plot"]], "process_nutations() (autodeer.respro.resonatorprofileanalysis method)": [[16, "autodeer.ResPro.ResonatorProfileAnalysis.process_nutations"]], "twodexperimentanalysis (class in autodeer.twod_experiment)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis"]], "_data_transpose() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis._data_transpose"]], "_stability_check() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis._stability_check"]], "autodeer.twod_experiment": [[17, "module-autodeer.TwoD_Experiment"]], "calculate_noise_level() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.calculate_noise_level"]], "calculate_optimal() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.calculate_optimal"]], "calculate_snr_threshold() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.calculate_snr_threshold"]], "create_bahrenberg_plots() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.create_bahrenberg_plots"]], "create_slice_plot() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.create_slice_plot"]], "create_twod_plot() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.create_twoD_plot"]], "estimated_snr() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.estimated_snr"]], "import_data() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.import_data"]], "import_dataset() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.import_dataset"]], "invert_signal() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.invert_signal"]], "load() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.load"]], "optimal_slice_plot() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.optimal_slice_plot"]], "set_snr_target() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.set_snr_target"]], "set_snr_threshold() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.set_snr_threshold"]], "set_time_target() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.set_time_target"]], "snr_normalize() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.snr_normalize"]], "value_at_pos() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.value_at_pos"]], "value_at_time() (autodeer.twod_experiment.twodexperimentanalysis method)": [[17, "autodeer.TwoD_Experiment.TwoDExperimentAnalysis.value_at_time"]], "__version__ (in module autodeer._version)": [[18, "autodeer._version.__version__"]], "autodeer._version": [[18, "module-autodeer._version"]], "interface (class in autodeer.classes)": [[19, "autodeer.classes.Interface"]], "parameter (class in autodeer.classes)": [[19, "autodeer.classes.Parameter"]], "__add__() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.__add__"]], "__eq__() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.__eq__"]], "__mul__() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.__mul__"]], "__rmul__() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.__rmul__"]], "__sub__() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.__sub__"]], "_from_dict() (autodeer.classes.parameter static method)": [[19, "autodeer.classes.Parameter._from_dict"]], "_from_json() (autodeer.classes.parameter class method)": [[19, "autodeer.classes.Parameter._from_json"]], "_to_dict() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter._to_dict"]], "_to_json() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter._to_json"]], "acquire_dataset() (autodeer.classes.interface method)": [[19, "autodeer.classes.Interface.acquire_dataset"]], "add_axis() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.add_axis"]], "autodeer.classes": [[19, "module-autodeer.classes"]], "connect() (autodeer.classes.interface method)": [[19, "autodeer.classes.Interface.connect"]], "copy() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.copy"]], "dim (autodeer.classes.parameter property)": [[19, "autodeer.classes.Parameter.dim"]], "get_axis() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.get_axis"]], "is_static() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.is_static"]], "isrunning() (autodeer.classes.interface method)": [[19, "autodeer.classes.Interface.isrunning"]], "launch() (autodeer.classes.interface method)": [[19, "autodeer.classes.Interface.launch"]], "load() (autodeer.classes.parameter class method)": [[19, "autodeer.classes.Parameter.load"]], "remove_dynamic() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.remove_dynamic"]], "save() (autodeer.classes.parameter method)": [[19, "autodeer.classes.Parameter.save"]], "terminate() (autodeer.classes.interface method)": [[19, "autodeer.classes.Interface.terminate"]], "terminate_at() (autodeer.classes.interface method)": [[19, "autodeer.classes.Interface.terminate_at"]], "reim_colors (in module autodeer.colors)": [[20, "autodeer.colors.ReIm_colors"]], "autodeer.colors": [[20, "module-autodeer.colors"]], "primary_colors (in module autodeer.colors)": [[20, "autodeer.colors.primary_colors"]], "shade_colors (in module autodeer.colors)": [[20, "autodeer.colors.shade_colors"]], "criteria (class in autodeer.criteria)": [[21, "autodeer.criteria.Criteria"]], "deercriteria (class in autodeer.criteria)": [[21, "autodeer.criteria.DEERCriteria"]], "snrcriteria (class in autodeer.criteria)": [[21, "autodeer.criteria.SNRCriteria"]], "timecriteria (class in autodeer.criteria)": [[21, "autodeer.criteria.TimeCriteria"]], "__add__() (autodeer.criteria.criteria method)": [[21, "autodeer.criteria.Criteria.__add__"]], "autodeer.criteria": [[21, "module-autodeer.criteria"]], "log (in module autodeer.criteria)": [[21, "autodeer.criteria.log"]], "epraccessor (class in autodeer.dataset)": [[22, "autodeer.dataset.EPRAccessor"]], "snr (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.SNR"]], "autodeer.dataset": [[22, "module-autodeer.dataset"]], "correctphase (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.correctphase"]], "correctphasefull (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.correctphasefull"]], "create_dataset_from_axes() (in module autodeer.dataset)": [[22, "autodeer.dataset.create_dataset_from_axes"]], "create_dataset_from_bruker() (in module autodeer.dataset)": [[22, "autodeer.dataset.create_dataset_from_bruker"]], "create_dataset_from_sequence() (in module autodeer.dataset)": [[22, "autodeer.dataset.create_dataset_from_sequence"]], "fft (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.fft"]], "get_all_axes() (in module autodeer.dataset)": [[22, "autodeer.dataset.get_all_axes"]], "get_all_fixed_param() (in module autodeer.dataset)": [[22, "autodeer.dataset.get_all_fixed_param"]], "normalise (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.normalise"]], "save (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.save"]], "sequence (autodeer.dataset.epraccessor property)": [[22, "autodeer.dataset.EPRAccessor.sequence"]], "app (in module autodeer.gui.__main__)": [[23, "autodeer.gui.__main__.app"]], "autodeer.gui.__main__": [[23, "module-autodeer.gui.__main__"]], "window (in module autodeer.gui.__main__)": [[23, "autodeer.gui.__main__.window"]], "t2_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.T2_result"]], "autodeersignals (class in autodeer.gui.autodeer_worker)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals"]], "autodeerworker (class in autodeer.gui.autodeer_worker)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker"]], "autodeer.gui.autodeer_worker": [[24, "module-autodeer.gui.autoDEER_worker"]], "error (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.error"]], "finished (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.finished"]], "fsweep_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.fsweep_result"]], "longdeer_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.longdeer_result"]], "longdeer_update (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.longdeer_update"]], "new_data() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.new_data"]], "new_pulses() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.new_pulses"]], "pause_and_wait() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.pause_and_wait"]], "progress (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.progress"]], "quickdeer_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.quickdeer_result"]], "quickdeer_update (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.quickdeer_update"]], "relax_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.relax_result"]], "reptime_scan_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.reptime_scan_result"]], "respro_result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.respro_result"]], "result (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.result"]], "run() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run"]], "run_2d_relax() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_2D_relax"]], "run_cp_relax() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_CP_relax"]], "run_t2_relax() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_T2_relax"]], "run_deer() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_deer"]], "run_fsweep() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_fsweep"]], "run_long_deer() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_long_deer"]], "run_quick_deer() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_quick_deer"]], "run_reptime_opt() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_reptime_opt"]], "run_respro() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.run_respro"]], "set_noise_mode() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.set_noise_mode"]], "status (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.status"]], "stop() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.stop"]], "timeout (autodeer.gui.autodeer_worker.autodeersignals attribute)": [[24, "autodeer.gui.autoDEER_worker.autoDEERSignals.timeout"]], "tune_pulses() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.tune_pulses"]], "update_lo() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.update_LO"]], "update_deersettings() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.update_deersettings"]], "update_gyro() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.update_gyro"]], "update_reptime() (autodeer.gui.autodeer_worker.autodeerworker method)": [[24, "autodeer.gui.autoDEER_worker.autoDEERWorker.update_reptime"]], "runadvanedautodeer() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.RunAdvanedAutoDEER"]], "runfullyautodeer() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.RunFullyAutoDEER"]], "worker (class in autodeer.gui)": [[25, "autodeer.gui.Worker"]], "workersignals (class in autodeer.gui)": [[25, "autodeer.gui.WorkerSignals"]], "advanced_mode_inputs() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.advanced_mode_inputs"]], "autodeerui (class in autodeer.gui)": [[25, "autodeer.gui.autoDEERUI"]], "autodeer.gui": [[25, "module-autodeer.gui"]], "change_lo() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.change_LO"]], "check_cp() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.check_CP"]], "check_t2() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.check_T2"]], "connect_spectrometer() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.connect_spectrometer"]], "create_fieldsweep_figure() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.create_fieldsweep_figure"]], "create_relax_figure() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.create_relax_figure"]], "create_report() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.create_report"]], "create_respro_figure() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.create_respro_figure"]], "error (autodeer.gui.workersignals attribute)": [[25, "autodeer.gui.WorkerSignals.error"]], "fill_table() (in module autodeer.gui)": [[25, "autodeer.gui.fill_table"]], "finished (autodeer.gui.workersignals attribute)": [[25, "autodeer.gui.WorkerSignals.finished"]], "fsweep_toolbar() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.fsweep_toolbar"]], "getcistring() (in module autodeer.gui)": [[25, "autodeer.gui.getCIstring"]], "get_sequence_rows() (in module autodeer.gui)": [[25, "autodeer.gui.get_sequence_rows"]], "list_str_to_type() (in module autodeer.gui)": [[25, "autodeer.gui.list_str_to_type"]], "load_epr_file() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.load_epr_file"]], "load_epr_file() (in module autodeer.gui)": [[25, "autodeer.gui.load_epr_file"]], "load_folder() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.load_folder"]], "load_spectrometer_config() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.load_spectrometer_config"]], "optimise_pulses() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.optimise_pulses"]], "optimise_pulses_button() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.optimise_pulses_button"]], "param_in_mhz() (in module autodeer.gui)": [[25, "autodeer.gui.param_in_MHz"]], "param_in_us() (in module autodeer.gui)": [[25, "autodeer.gui.param_in_us"]], "pyqt_table_from_dict() (in module autodeer.gui)": [[25, "autodeer.gui.pyqt_table_from_dict"]], "raise_warning() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.raise_warning"]], "read_table() (in module autodeer.gui)": [[25, "autodeer.gui.read_table"]], "refresh_t2() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.refresh_T2"]], "refresh_fieldsweep_after_fit() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.refresh_fieldsweep_after_fit"]], "refresh_relax() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.refresh_relax"]], "refresh_relax_figure() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.refresh_relax_figure"]], "refresh_respro() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.refresh_respro"]], "relax_toolbar() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.relax_toolbar"]], "respro_toolbar() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.respro_toolbar"]], "result (autodeer.gui.workersignals attribute)": [[25, "autodeer.gui.WorkerSignals.result"]], "run() (autodeer.gui.worker method)": [[25, "autodeer.gui.Worker.run"]], "save_data() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.save_data"]], "select_resonator() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.select_resonator"]], "set_spectrometer_connected_light() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.set_spectrometer_connected_light"]], "str_to_list_type() (in module autodeer.gui)": [[25, "autodeer.gui.str_to_list_type"]], "test_snr() (in module autodeer.gui)": [[25, "autodeer.gui.test_SNR"]], "timeout() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.timeout"]], "update_t2() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_T2"]], "update_fieldsweep() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_fieldsweep"]], "update_longdeer() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_longdeer"]], "update_optimise_pulses_figure() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_optimise_pulses_figure"]], "update_quickdeer() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_quickdeer"]], "update_relax() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_relax"]], "update_reptime() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_reptime"]], "update_respro() (autodeer.gui.autodeerui method)": [[25, "autodeer.gui.autoDEERUI.update_respro"]], "logdialog (class in autodeer.gui.log)": [[26, "autodeer.gui.log.LogDialog"]], "add_new_entry() (autodeer.gui.log.logdialog method)": [[26, "autodeer.gui.log.LogDialog.add_new_entry"]], "autodeer.gui.log": [[26, "module-autodeer.gui.log"]], "clear_log() (autodeer.gui.log.logdialog method)": [[26, "autodeer.gui.log.LogDialog.clear_log"]], "package_directory (in module autodeer.gui.log)": [[26, "autodeer.gui.log.package_directory"]], "save_log_to_file() (autodeer.gui.log.logdialog method)": [[26, "autodeer.gui.log.LogDialog.save_log_to_file"]], "update_log_text() (autodeer.gui.log.logdialog method)": [[26, "autodeer.gui.log.LogDialog.update_log_text"]], "runadvanedautodeer() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.RunAdvanedAutoDEER"]], "runfullyautodeer() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.RunFullyAutoDEER"]], "sampleconccombobox_opts (in module autodeer.gui.main)": [[27, "autodeer.gui.main.SampleConcComboBox_opts"]], "t2_process() (in module autodeer.gui.main)": [[27, "autodeer.gui.main.T2_process"]], "worker (class in autodeer.gui.main)": [[27, "autodeer.gui.main.Worker"]], "workersignals (class in autodeer.gui.main)": [[27, "autodeer.gui.main.WorkerSignals"]], "advanced_mode_inputs() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.advanced_mode_inputs"]], "app (in module autodeer.gui.main)": [[27, "autodeer.gui.main.app"]], "autodeerui (class in autodeer.gui.main)": [[27, "autodeer.gui.main.autoDEERUI"]], "autodeer.gui.main": [[27, "module-autodeer.gui.main"]], "change_lo() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.change_LO"]], "check_cp() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.check_CP"]], "check_t2() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.check_T2"]], "connect_spectrometer() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.connect_spectrometer"]], "create_fieldsweep_figure() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.create_fieldsweep_figure"]], "create_relax_figure() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.create_relax_figure"]], "create_report() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.create_report"]], "create_respro_figure() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.create_respro_figure"]], "error (autodeer.gui.main.workersignals attribute)": [[27, "autodeer.gui.main.WorkerSignals.error"]], "fieldsweep_fit() (in module autodeer.gui.main)": [[27, "autodeer.gui.main.fieldsweep_fit"]], "finished (autodeer.gui.main.workersignals attribute)": [[27, "autodeer.gui.main.WorkerSignals.finished"]], "fsweep_toolbar() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.fsweep_toolbar"]], "load_epr_file() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.load_epr_file"]], "load_folder() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.load_folder"]], "load_spectrometer_config() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.load_spectrometer_config"]], "optimise_pulses() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.optimise_pulses"]], "optimise_pulses_button() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.optimise_pulses_button"]], "package_directory (in module autodeer.gui.main)": [[27, "autodeer.gui.main.package_directory"]], "progress (autodeer.gui.main.workersignals attribute)": [[27, "autodeer.gui.main.WorkerSignals.progress"]], "raise_warning() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.raise_warning"]], "refresh_t2() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.refresh_T2"]], "refresh_fieldsweep_after_fit() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.refresh_fieldsweep_after_fit"]], "refresh_relax() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.refresh_relax"]], "refresh_relax_figure() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.refresh_relax_figure"]], "refresh_respro() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.refresh_respro"]], "relax_process() (in module autodeer.gui.main)": [[27, "autodeer.gui.main.relax_process"]], "relax_toolbar() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.relax_toolbar"]], "respro_process() (in module autodeer.gui.main)": [[27, "autodeer.gui.main.respro_process"]], "respro_toolbar() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.respro_toolbar"]], "result (autodeer.gui.main.workersignals attribute)": [[27, "autodeer.gui.main.WorkerSignals.result"]], "run() (autodeer.gui.main.worker method)": [[27, "autodeer.gui.main.Worker.run"]], "save_data() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.save_data"]], "select_resonator() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.select_resonator"]], "set_spectrometer_connected_light() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.set_spectrometer_connected_light"]], "timeout() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.timeout"]], "update_t2() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_T2"]], "update_fieldsweep() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_fieldsweep"]], "update_longdeer() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_longdeer"]], "update_optimise_pulses_figure() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_optimise_pulses_figure"]], "update_quickdeer() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_quickdeer"]], "update_relax() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_relax"]], "update_reptime() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_reptime"]], "update_respro() (autodeer.gui.main.autodeerui method)": [[27, "autodeer.gui.main.autoDEERUI.update_respro"]], "deerplot (class in autodeer.gui.quickdeer)": [[28, "autodeer.gui.quickdeer.DEERplot"]], "app (in module autodeer.gui.quickdeer)": [[28, "autodeer.gui.quickdeer.app"]], "autodeer.gui.quickdeer": [[28, "module-autodeer.gui.quickdeer"]], "clearlayout() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.clearLayout"]], "create_figure() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.create_figure"]], "deeranalysis_process() (in module autodeer.gui.quickdeer)": [[28, "autodeer.gui.quickdeer.deeranalysis_process"]], "get_vexp() (in module autodeer.gui.quickdeer)": [[28, "autodeer.gui.quickdeer.get_Vexp"]], "package_directory (in module autodeer.gui.quickdeer)": [[28, "autodeer.gui.quickdeer.package_directory"]], "process_deeranalysis() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.process_deeranalysis"]], "refresh_deer() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.refresh_deer"]], "setup_inputs() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.setup_inputs"]], "toolbar() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.toolbar"]], "update_analysis_table() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.update_analysis_table"]], "update_figure() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.update_figure"]], "update_fit_result() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.update_fit_result"]], "update_inputs_from_dataset() (autodeer.gui.quickdeer.deerplot method)": [[28, "autodeer.gui.quickdeer.DEERplot.update_inputs_from_dataset"]], "autodeer.gui.test_main": [[29, "module-autodeer.gui.test_main"]], "worker (class in autodeer.gui.tools)": [[30, "autodeer.gui.tools.Worker"]], "workersignals (class in autodeer.gui.tools)": [[30, "autodeer.gui.tools.WorkerSignals"]], "autodeer.gui.tools": [[30, "module-autodeer.gui.tools"]], "error (autodeer.gui.tools.workersignals attribute)": [[30, "autodeer.gui.tools.WorkerSignals.error"]], "fill_table() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.fill_table"]], "finished (autodeer.gui.tools.workersignals attribute)": [[30, "autodeer.gui.tools.WorkerSignals.finished"]], "getcistring() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.getCIstring"]], "get_sequence_rows() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.get_sequence_rows"]], "list_str_to_type() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.list_str_to_type"]], "load_epr_file() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.load_epr_file"]], "param_in_mhz() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.param_in_MHz"]], "param_in_us() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.param_in_us"]], "pyqt_table_from_dict() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.pyqt_table_from_dict"]], "read_table() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.read_table"]], "result (autodeer.gui.tools.workersignals attribute)": [[30, "autodeer.gui.tools.WorkerSignals.result"]], "run() (autodeer.gui.tools.worker method)": [[30, "autodeer.gui.tools.Worker.run"]], "str_to_list_type() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.str_to_list_type"]], "test_snr() (in module autodeer.gui.tools)": [[30, "autodeer.gui.tools.test_SNR"]], "brukerawg (class in autodeer.hardware.bruker_awg)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG"]], "_launch_complex_thread() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG._launch_complex_thread"]], "acquire_dataset() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.acquire_dataset"]], "autodeer.hardware.bruker_awg": [[31, "module-autodeer.hardware.Bruker_AWG"]], "calc_d0() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.calc_d0"]], "calc_d0_from_hahn_echo() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.calc_d0_from_Hahn_Echo"]], "connect() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.connect"]], "get_specjet_data() (in module autodeer.hardware.bruker_awg)": [[31, "autodeer.hardware.Bruker_AWG.get_specjet_data"]], "isrunning() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.isrunning"]], "launch() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.launch"]], "setup() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.setup"]], "terminate() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.terminate"]], "test_if_mpfu_compatability() (in module autodeer.hardware.bruker_awg)": [[31, "autodeer.hardware.Bruker_AWG.test_if_MPFU_compatability"]], "tune_nutation() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.tune_nutation"]], "tune_pulse() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.tune_pulse"]], "tune_rectpulse() (autodeer.hardware.bruker_awg.brukerawg method)": [[31, "autodeer.hardware.Bruker_AWG.BrukerAWG.tune_rectpulse"]], "brukermpfu (class in autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU"]], "eldortune() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.ELDORtune"]], "mpfutune() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.MPFUtune"]], "_mpfu_channels() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU._MPFU_channels"]], "_launch_complex_thread() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU._launch_complex_thread"]], "acquire_dataset() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.acquire_dataset"]], "autodeer.hardware.bruker_mpfu": [[32, "module-autodeer.hardware.Bruker_MPFU"]], "calc_d0() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.calc_d0"]], "calc_d0_from_hahn_echo() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.calc_d0_from_Hahn_Echo"]], "connect() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.connect"]], "get_specjet_data() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.get_specjet_data"]], "hw_log (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.hw_log"]], "isrunning() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.isrunning"]], "launch() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.launch"]], "setup() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.setup"]], "step_parameters() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.step_parameters"]], "terminate() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.terminate"]], "test_if_mpfu_compatability() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.test_if_MPFU_compatability"]], "tune() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.tune"]], "tune_phase() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.tune_phase"]], "tune_power() (in module autodeer.hardware.bruker_mpfu)": [[32, "autodeer.hardware.Bruker_MPFU.tune_power"]], "tune_pulse() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.tune_pulse"]], "tune_rectpulse() (autodeer.hardware.bruker_mpfu.brukermpfu method)": [[32, "autodeer.hardware.Bruker_MPFU.BrukerMPFU.tune_rectpulse"]], "module_dir (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.MODULE_DIR"]], "psphasecycle (class in autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.PSPhaseCycle"]], "psparvar (class in autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.PSparvar"]], "pulsespel (class in autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel"]], "_expdefs() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._ExpDefs"]], "_mpfu() (autodeer.hardware.bruker_tools.psphasecycle method)": [[33, "autodeer.hardware.Bruker_tools.PSPhaseCycle._MPFU"]], "__str__() (autodeer.hardware.bruker_tools.psphasecycle method)": [[33, "autodeer.hardware.Bruker_tools.PSPhaseCycle.__str__"]], "__str__() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel.__str__"]], "_addawgpulse() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._addAWGPulse"]], "_addawgpulse() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools._addAWGPulse"]], "_adddef() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._addDef"]], "_addexp() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._addExp"]], "_addphasecycle() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._addPhaseCycle"]], "_addscanloop() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._addScanLoop"]], "_check_sequence() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._check_sequence"]], "_cmpl_exp() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._cmpl_Exp"]], "_cmpl_def() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._cmpl_def"]], "_detect() (autodeer.hardware.bruker_tools.psphasecycle method)": [[33, "autodeer.hardware.Bruker_tools.PSPhaseCycle._detect"]], "_main() (autodeer.hardware.bruker_tools.psphasecycle method)": [[33, "autodeer.hardware.Bruker_tools.PSPhaseCycle._main"]], "_new_delay() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._new_delay"]], "_new_pulse() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._new_pulse"]], "_new_var() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel._new_var"]], "autodeer.hardware.bruker_tools": [[33, "module-autodeer.hardware.Bruker_tools"]], "build_unique_progtable() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.build_unique_progtable"]], "calc_rel_positions() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.calc_rel_positions"]], "change_dimensions() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.change_dimensions"]], "checkpulsespel() (autodeer.hardware.bruker_tools.psparvar method)": [[33, "autodeer.hardware.Bruker_tools.PSparvar.checkPulseSpel"]], "check_variable() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.check_variable"]], "convert_progtable() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.convert_progtable"]], "get_arange() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.get_arange"]], "header (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.header"]], "possible_delays (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.possible_delays"]], "possible_pulses (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.possible_pulses"]], "possible_vars (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.possible_vars"]], "run_general() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.run_general"]], "save() (autodeer.hardware.bruker_tools.pulsespel method)": [[33, "autodeer.hardware.Bruker_tools.PulseSpel.save"]], "write_pulsespel_file() (in module autodeer.hardware.bruker_tools)": [[33, "autodeer.hardware.Bruker_tools.write_pulsespel_file"]], "eth_awg_interface (class in autodeer.hardware.eth_awg)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface"]], "_build_exp_struct() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface._build_exp_struct"]], "_build_parvar() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface._build_parvar"]], "_build_phase_cycle() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface._build_phase_cycle"]], "_build_pulse() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface._build_pulse"]], "acquire_dataset() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.acquire_dataset"]], "acquire_dataset_from_matlab() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.acquire_dataset_from_matlab"]], "autodeer.hardware.eth_awg": [[34, "module-autodeer.hardware.ETH_awg"]], "bg_thread() (in module autodeer.hardware.eth_awg)": [[34, "autodeer.hardware.ETH_awg.bg_thread"]], "connect() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.connect"]], "isrunning() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.isrunning"]], "launch() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.launch"]], "launch_long() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.launch_long"]], "launch_normal() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.launch_normal"]], "log (in module autodeer.hardware.eth_awg)": [[34, "autodeer.hardware.ETH_awg.log"]], "savefolder (autodeer.hardware.eth_awg.eth_awg_interface property)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.savefolder"]], "terminate() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.terminate"]], "tune() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.tune"]], "tune_pulse() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.tune_pulse"]], "tune_rectpulse() (autodeer.hardware.eth_awg.eth_awg_interface method)": [[34, "autodeer.hardware.ETH_awg.ETH_awg_interface.tune_rectpulse"]], "autodeer.hardware.eth_awg_load": [[35, "module-autodeer.hardware.ETH_awg_load"]], "calc_percieved_freq() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.calc_percieved_freq"]], "digitally_upconvert() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.digitally_upconvert"]], "find_max_pulse_length() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.find_max_pulse_length"]], "match_filter_dc() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.match_filter_dc"]], "scipy_filter_dc() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.scipy_filter_dc"]], "uwb_eval_match() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.uwb_eval_match"]], "uwb_load() (in module autodeer.hardware.eth_awg_load)": [[35, "autodeer.hardware.ETH_awg_load.uwb_load"]], "xeprapilink (class in autodeer.hardware.xeprapi_link)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink"]], "_get_xepr_global() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._get_Xepr_global"]], "_get_cur_exp_global() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._get_cur_exp_global"]], "_set_xepr_global() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._set_Xepr_global"]], "_set_cur_exp_global() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._set_cur_exp_global"]], "_set_cur_exp_param() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._set_cur_exp_param"]], "_set_hidden_param() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._set_hidden_param"]], "_xepr_retry() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink._xepr_retry"]], "abort_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.abort_exp"]], "acquire_dataset() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.acquire_dataset"]], "acquire_scan() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.acquire_scan"]], "acquire_scan_2d() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.acquire_scan_2d"]], "acquire_scan_at() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.acquire_scan_at"]], "autodeer.hardware.xeprapi_link": [[36, "module-autodeer.hardware.XeprAPI_link"]], "compile_pulsespel_def() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.compile_PulseSpel_def"]], "compile_pulsespel_prg() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.compile_PulseSpel_prg"]], "connect() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.connect"]], "find_xepr() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.find_Xepr"]], "find_cur_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.find_cur_exp"]], "find_hidden() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.find_hidden"]], "get_acquisition_mode() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_Acquisition_mode"]], "get_eldor_freq() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_ELDOR_freq"]], "get_mw_amp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_MW_amp"]], "get_phasecycle() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PhaseCycle"]], "get_pulsespel_def_filename() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PulseSpel_def_filename"]], "get_pulsespel_def_filepath() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PulseSpel_def_filepath"]], "get_pulsespel_exp_filename() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PulseSpel_exp_filename"]], "get_pulsespel_exp_filepath() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PulseSpel_exp_filepath"]], "get_pulsespel_experiment() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PulseSpel_experiment"]], "get_pulsespel_phase_cycling() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_PulseSpel_phase_cycling"]], "get_replacemode() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_ReplaceMode"]], "get_attenuator() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_attenuator"]], "get_config_file() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_config_file"]], "get_counterfreq() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_counterfreq"]], "get_field() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_field"]], "get_freq() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_freq"]], "get_hidden_param() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_hidden_param"]], "get_param() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_param"]], "get_phase() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_phase"]], "get_spec_config() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_spec_config"]], "get_sweep_width() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_sweep_width"]], "get_video_bandwidth() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_video_bandwidth"]], "get_video_gain() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.get_video_gain"]], "hw_log (in module autodeer.hardware.xeprapi_link)": [[36, "autodeer.hardware.XeprAPI_link.hw_log"]], "is_exp_running() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.is_exp_running"]], "pause_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.pause_exp"]], "rerun_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.rerun_exp"]], "run_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.run_exp"]], "save_pulsespel_def() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.save_PulseSpel_def"]], "save_pulsespel_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.save_PulseSpel_exp"]], "set_acquisition_mode() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_Acquisition_mode"]], "set_eldor_freq() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_ELDOR_freq"]], "set_mw_amp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_MW_amp"]], "set_phasecycle() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_PhaseCycle"]], "set_pulsespel_def_filepath() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_PulseSpel_def_filepath"]], "set_pulsespel_exp_filepath() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_PulseSpel_exp_filepath"]], "set_pulsespel_experiment() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_PulseSpel_experiment"]], "set_pulsespel_phase_cycling() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_PulseSpel_phase_cycling"]], "set_pulsespel_var() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_PulseSpel_var"]], "set_replacemode() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_ReplaceMode"]], "set_attenuator() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_attenuator"]], "set_config_file() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_config_file"]], "set_field() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_field"]], "set_freq() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_freq"]], "set_hidden_param() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_hidden_param"]], "set_param() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_param"]], "set_phase() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_phase"]], "set_sweep_width() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_sweep_width"]], "set_video_bandwidth() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_video_bandwidth"]], "set_video_gain() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.set_video_gain"]], "stop_exp() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.stop_exp"]], "xepr_path (in module autodeer.hardware.xeprapi_link)": [[36, "autodeer.hardware.XeprAPI_link.xepr_path"]], "xepr_save() (autodeer.hardware.xeprapi_link.xeprapilink method)": [[36, "autodeer.hardware.XeprAPI_link.XeprAPILink.xepr_save"]], "_gen_eseem() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._gen_ESEEM"]], "_similate_respro() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._similate_respro"]], "_simulate_cp() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._simulate_CP"]], "_simulate_t2() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._simulate_T2"]], "_simulate_deer() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._simulate_deer"]], "_simulate_field_sweep() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._simulate_field_sweep"]], "_simulate_reptimescan() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy._simulate_reptimescan"]], "acquire_dataset() (autodeer.hardware.dummy.dummyinterface method)": [[37, "autodeer.hardware.dummy.dummyInterface.acquire_dataset"]], "add_noise() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.add_noise"]], "add_phaseshift() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.add_phaseshift"]], "autodeer.hardware.dummy": [[37, "module-autodeer.hardware.dummy"]], "dummyinterface (class in autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.dummyInterface"]], "hw_log (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.hw_log"]], "isrunning() (autodeer.hardware.dummy.dummyinterface method)": [[37, "autodeer.hardware.dummy.dummyInterface.isrunning"]], "launch() (autodeer.hardware.dummy.dummyinterface method)": [[37, "autodeer.hardware.dummy.dummyInterface.launch"]], "rng (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.rng"]], "terminate() (autodeer.hardware.dummy.dummyinterface method)": [[37, "autodeer.hardware.dummy.dummyInterface.terminate"]], "tune_pulse() (autodeer.hardware.dummy.dummyinterface method)": [[37, "autodeer.hardware.dummy.dummyInterface.tune_pulse"]], "tune_rectpulse() (autodeer.hardware.dummy.dummyinterface method)": [[37, "autodeer.hardware.dummy.dummyInterface.tune_rectpulse"]], "val_in_ns() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.val_in_ns"]], "val_in_us() (in module autodeer.hardware.dummy)": [[37, "autodeer.hardware.dummy.val_in_us"]], "xeprdataset() (autodeer.hardware.dummy_xepr.dummy_xepr method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprDataset"]], "xeprexperiment() (autodeer.hardware.dummy_xepr.dummy_xepr method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprExperiment"]], "__getitem__() (autodeer.hardware.dummy_xepr.dummy_cur_exp method)": [[38, "autodeer.hardware.dummy_xepr.dummy_cur_exp.__getitem__"]], "__getitem__() (autodeer.hardware.dummy_xepr.dummy_hidden method)": [[38, "autodeer.hardware.dummy_xepr.dummy_hidden.__getitem__"]], "abort_exp() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.abort_exp"]], "acquire_scan() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.acquire_scan"]], "acquire_scan_2d() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.acquire_scan_2d"]], "acquire_scan_at() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.acquire_scan_at"]], "aqexprun() (autodeer.hardware.dummy_xepr.dummy_cur_exp method)": [[38, "autodeer.hardware.dummy_xepr.dummy_cur_exp.aqExpRun"]], "aqexpselect() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqExpSelect"]], "aqpgcompile() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqPgCompile"]], "aqpgdefload() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqPgDefLoad"]], "aqpgdefsaveas() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqPgDefSaveAs"]], "aqpgload() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqPgLoad"]], "aqpgsaveas() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqPgSaveAs"]], "aqpgshowprg() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.aqPgShowPrg"]], "autodeer.hardware.dummy_xepr": [[38, "module-autodeer.hardware.dummy_xepr"]], "compile_pulsespel_def() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.compile_PulseSpel_def"]], "compile_pulsespel_prg() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.compile_PulseSpel_prg"]], "dummy_api (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_api"]], "dummy_cur_exp (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_cur_exp"]], "dummy_dataset (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_dataset"]], "dummy_hidden (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_hidden"]], "dummy_param (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_param"]], "dummy_xepr (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr"]], "dummy_xepr.xeprcmds (class in autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds"]], "find_xepr() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.find_Xepr"]], "getparam() (autodeer.hardware.dummy_xepr.dummy_cur_exp method)": [[38, "autodeer.hardware.dummy_xepr.dummy_cur_exp.getParam"]], "getparam() (autodeer.hardware.dummy_xepr.dummy_hidden method)": [[38, "autodeer.hardware.dummy_xepr.dummy_hidden.getParam"]], "hardware_meta (in module autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.hardware_meta"]], "hw_log (in module autodeer.hardware.dummy_xepr)": [[38, "autodeer.hardware.dummy_xepr.hw_log"]], "is_exp_running() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.is_exp_running"]], "run_exp() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.run_exp"]], "set_pulsespel_var() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.set_PulseSpel_var"]], "stop_exp() (autodeer.hardware.dummy_xepr.dummy_api method)": [[38, "autodeer.hardware.dummy_xepr.dummy_api.stop_exp"]], "value (autodeer.hardware.dummy_xepr.dummy_param property)": [[38, "autodeer.hardware.dummy_xepr.dummy_param.value"]], "vpsave() (autodeer.hardware.dummy_xepr.dummy_xepr.xeprcmds method)": [[38, "autodeer.hardware.dummy_xepr.dummy_xepr.XeprCmds.vpSave"]], "autodeer.hardware": [[39, "module-autodeer.hardware"]], "cp_run() (in module autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.CP_run"]], "calibratefreq() (in module autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.CalibrateFreq"]], "deer (class in autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.DEER"]], "deer5p_run() (in module autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.DEER5p_run"]], "eldortune (class in autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.ELDORtune"]], "module_dir (in module autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.MODULE_DIR"]], "mpfutune (class in autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.MPFUtune"]], "pulseprofile (class in autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.PulseProfile"]], "_freq_sweep() (autodeer.hardware.xepr_experiments.pulseprofile method)": [[40, "autodeer.hardware.xepr_experiments.PulseProfile._freq_sweep"]], "_get_exp() (autodeer.hardware.xepr_experiments.eldortune method)": [[40, "autodeer.hardware.xepr_experiments.ELDORtune._get_exp"]], "_setup_echo() (autodeer.hardware.xepr_experiments.mpfutune method)": [[40, "autodeer.hardware.xepr_experiments.MPFUtune._setup_echo"]], "_setup_exp() (autodeer.hardware.xepr_experiments.eldortune method)": [[40, "autodeer.hardware.xepr_experiments.ELDORtune._setup_exp"]], "_setup_exp() (autodeer.hardware.xepr_experiments.pulseprofile method)": [[40, "autodeer.hardware.xepr_experiments.PulseProfile._setup_exp"]], "autodeer.hardware.xepr_experiments": [[40, "module-autodeer.hardware.xepr_experiments"]], "calc_d0() (autodeer.hardware.xepr_experiments.mpfutune method)": [[40, "autodeer.hardware.xepr_experiments.MPFUtune.calc_d0"]], "find_min() (autodeer.hardware.xepr_experiments.eldortune method)": [[40, "autodeer.hardware.xepr_experiments.ELDORtune.find_min"]], "get_nutations() (in module autodeer.hardware.xepr_experiments)": [[40, "autodeer.hardware.xepr_experiments.get_nutations"]], "run_4p() (autodeer.hardware.xepr_experiments.deer method)": [[40, "autodeer.hardware.xepr_experiments.DEER.run_4p"]], "run_5p() (autodeer.hardware.xepr_experiments.deer method)": [[40, "autodeer.hardware.xepr_experiments.DEER.run_5p"]], "run_cp() (autodeer.hardware.xepr_experiments.deer method)": [[40, "autodeer.hardware.xepr_experiments.DEER.run_CP"]], "tune() (autodeer.hardware.xepr_experiments.eldortune method)": [[40, "autodeer.hardware.xepr_experiments.ELDORtune.tune"]], "tune() (autodeer.hardware.xepr_experiments.mpfutune method)": [[40, "autodeer.hardware.xepr_experiments.MPFUtune.tune"]], "tune_phase() (autodeer.hardware.xepr_experiments.mpfutune method)": [[40, "autodeer.hardware.xepr_experiments.MPFUtune.tune_phase"]], "tune_power() (autodeer.hardware.xepr_experiments.mpfutune method)": [[40, "autodeer.hardware.xepr_experiments.MPFUtune.tune_power"]], "carrpurcellanalysis (class in autodeer)": [[41, "autodeer.CarrPurcellAnalysis"]], "carrpurcellsequence (class in autodeer)": [[41, "autodeer.CarrPurcellSequence"]], "criteria (class in autodeer)": [[41, "autodeer.Criteria"]], "deercriteria (class in autodeer)": [[41, "autodeer.DEERCriteria"]], "deersequence (class in autodeer)": [[41, "autodeer.DEERSequence"]], "deeranalysis() (in module autodeer)": [[41, "autodeer.DEERanalysis"], [41, "id25"]], "deeranalysis_plot() (in module autodeer)": [[41, "autodeer.DEERanalysis_plot"]], "deeranalysis_plot_pub() (in module autodeer)": [[41, "autodeer.DEERanalysis_plot_pub"]], "epraccessor (class in autodeer)": [[41, "autodeer.EPRAccessor"]], "fieldsweepanalysis (class in autodeer)": [[41, "autodeer.FieldSweepAnalysis"]], "fieldsweepsequence (class in autodeer)": [[41, "autodeer.FieldSweepSequence"]], "hahnechosequence (class in autodeer)": [[41, "autodeer.HahnEchoSequence"]], "identifyroi() (in module autodeer)": [[41, "autodeer.IdentifyROI"]], "refocusedecho2dsequence (class in autodeer)": [[41, "autodeer.RefocusedEcho2DSequence"]], "reporter (class in autodeer)": [[41, "autodeer.Reporter"]], "reptimeanalysis (class in autodeer)": [[41, "autodeer.ReptimeAnalysis"]], "reptimescan (class in autodeer)": [[41, "autodeer.ReptimeScan"]], "resonatorprofileanalysis (class in autodeer)": [[41, "autodeer.ResonatorProfileAnalysis"]], "resonatorprofilesequence (class in autodeer)": [[41, "autodeer.ResonatorProfileSequence"]], "snr (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.SNR"]], "snrcriteria (class in autodeer)": [[41, "autodeer.SNRCriteria"]], "sequence (class in autodeer)": [[41, "autodeer.Sequence"], [41, "id2"], [41, "id27"]], "t2relaxationsequence (class in autodeer)": [[41, "autodeer.T2RelaxationSequence"]], "twtprofilesequence (class in autodeer)": [[41, "autodeer.TWTProfileSequence"]], "timecriteria (class in autodeer)": [[41, "autodeer.TimeCriteria"]], "__add__() (autodeer.criteria method)": [[41, "autodeer.Criteria.__add__"]], "__str__() (autodeer.sequence method)": [[41, "autodeer.Sequence.__str__"], [41, "id17"], [41, "id42"]], "__version__ (in module autodeer)": [[41, "autodeer.__version__"]], "_build() (autodeer.reporter method)": [[41, "autodeer.Reporter._build"]], "_buildphasecycle() (autodeer.sequence method)": [[41, "autodeer.Sequence._buildPhaseCycle"], [41, "id33"], [41, "id8"]], "_build_sequence() (autodeer.carrpurcellsequence method)": [[41, "autodeer.CarrPurcellSequence._build_sequence"]], "_build_sequence() (autodeer.refocusedecho2dsequence method)": [[41, "autodeer.RefocusedEcho2DSequence._build_sequence"]], "_build_sequence() (autodeer.resonatorprofilesequence method)": [[41, "autodeer.ResonatorProfileSequence._build_sequence"]], "_build_sequence() (autodeer.twtprofilesequence method)": [[41, "autodeer.TWTProfileSequence._build_sequence"]], "_checkrect() (autodeer.sequence method)": [[41, "autodeer.Sequence._checkRect"], [41, "id16"], [41, "id41"]], "_convert_to_delay() (autodeer.sequence method)": [[41, "autodeer.Sequence._convert_to_delay"], [41, "id14"], [41, "id39"]], "_convert_to_pulses() (autodeer.sequence method)": [[41, "autodeer.Sequence._convert_to_pulses"], [41, "id15"], [41, "id40"]], "_estimate_time() (autodeer.sequence method)": [[41, "autodeer.Sequence._estimate_time"], [41, "id32"], [41, "id7"]], "_from_dict() (autodeer.sequence class method)": [[41, "autodeer.Sequence._from_dict"], [41, "id22"], [41, "id47"]], "_from_json() (autodeer.sequence class method)": [[41, "autodeer.Sequence._from_json"], [41, "id23"], [41, "id48"]], "_process_fit() (autodeer.resonatorprofileanalysis method)": [[41, "autodeer.ResonatorProfileAnalysis._process_fit"]], "_to_dict() (autodeer.sequence method)": [[41, "autodeer.Sequence._to_dict"], [41, "id19"], [41, "id44"]], "_to_json() (autodeer.sequence method)": [[41, "autodeer.Sequence._to_json"], [41, "id20"], [41, "id45"]], "addpulse() (autodeer.sequence method)": [[41, "autodeer.Sequence.addPulse"], [41, "id31"], [41, "id6"]], "add_eseem_avg() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.add_ESEEM_avg"]], "add_code_block() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_code_block"]], "add_figure() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_figure"]], "add_new_section() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_new_section"]], "add_page_break() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_page_break"]], "add_space() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_space"]], "add_table() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_table"]], "add_text() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_text"]], "add_title() (autodeer.reporter method)": [[41, "autodeer.Reporter.add_title"]], "autoeprdecoder() (in module autodeer)": [[41, "autodeer.autoEPRDecoder"], [41, "id1"], [41, "id26"]], "autodeer": [[41, "module-autodeer"]], "build_table() (in module autodeer)": [[41, "autodeer.build_table"], [41, "id0"]], "calc_gyro() (autodeer.fieldsweepanalysis method)": [[41, "autodeer.FieldSweepAnalysis.calc_gyro"]], "calc_noise_level() (autodeer.fieldsweepanalysis method)": [[41, "autodeer.FieldSweepAnalysis.calc_noise_level"]], "calc_optimal_reptime() (autodeer.reptimeanalysis method)": [[41, "autodeer.ReptimeAnalysis.calc_optimal_reptime"]], "check_decay() (autodeer.carrpurcellanalysis method)": [[41, "autodeer.CarrPurcellAnalysis.check_decay"]], "cmap (in module autodeer)": [[41, "autodeer.cmap"]], "combo_figure() (in module autodeer)": [[41, "autodeer.combo_figure"]], "convert() (autodeer.sequence method)": [[41, "autodeer.Sequence.convert"], [41, "id13"], [41, "id38"]], "copy() (autodeer.sequence method)": [[41, "autodeer.Sequence.copy"], [41, "id18"], [41, "id43"]], "correctphase (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.correctphase"]], "correctphasefull (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.correctphasefull"]], "create_dataset_from_axes() (in module autodeer)": [[41, "autodeer.create_dataset_from_axes"]], "create_dataset_from_bruker() (in module autodeer)": [[41, "autodeer.create_dataset_from_bruker"]], "create_dataset_from_sequence() (in module autodeer)": [[41, "autodeer.create_dataset_from_sequence"]], "detect_eseem() (in module autodeer)": [[41, "autodeer.detect_ESEEM"]], "eprload() (in module autodeer)": [[41, "autodeer.eprload"]], "evolution() (autodeer.sequence method)": [[41, "autodeer.Sequence.evolution"], [41, "id34"], [41, "id9"]], "fft (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.fft"]], "find_max() (autodeer.fieldsweepanalysis method)": [[41, "autodeer.FieldSweepAnalysis.find_max"]], "find_optimal() (autodeer.carrpurcellanalysis method)": [[41, "autodeer.CarrPurcellAnalysis.find_optimal"]], "fit() (autodeer.carrpurcellanalysis method)": [[41, "autodeer.CarrPurcellAnalysis.fit"]], "fit() (autodeer.fieldsweepanalysis method)": [[41, "autodeer.FieldSweepAnalysis.fit"]], "fit() (autodeer.reptimeanalysis method)": [[41, "autodeer.ReptimeAnalysis.fit"]], "fit() (autodeer.resonatorprofileanalysis method)": [[41, "autodeer.ResonatorProfileAnalysis.fit"]], "five_pulse() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.five_pulse"]], "footer() (autodeer.reporter method)": [[41, "autodeer.Reporter.footer"]], "four_pulse() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.four_pulse"]], "gcd() (in module autodeer)": [[41, "autodeer.gcd"]], "get_all_axes() (in module autodeer)": [[41, "autodeer.get_all_axes"]], "get_all_fixed_param() (in module autodeer)": [[41, "autodeer.get_all_fixed_param"]], "header() (autodeer.reporter method)": [[41, "autodeer.Reporter.header"]], "isdelayfocused() (autodeer.sequence method)": [[41, "autodeer.Sequence.isDelayFocused"], [41, "id12"], [41, "id37"]], "ispulsefocused() (autodeer.sequence method)": [[41, "autodeer.Sequence.isPulseFocused"], [41, "id11"], [41, "id36"]], "load() (autodeer.sequence class method)": [[41, "autodeer.Sequence.load"], [41, "id24"], [41, "id49"]], "log (in module autodeer)": [[41, "autodeer.log"]], "ndeer_cp() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.nDEER_CP"]], "normalise (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.normalise"]], "normalise_01() (in module autodeer)": [[41, "autodeer.normalise_01"]], "optimise_pulses() (in module autodeer)": [[41, "autodeer.optimise_pulses"]], "optimise_spectra_position() (in module autodeer)": [[41, "autodeer.optimise_spectra_position"]], "plot() (autodeer.carrpurcellanalysis method)": [[41, "autodeer.CarrPurcellAnalysis.plot"]], "plot() (autodeer.fieldsweepanalysis method)": [[41, "autodeer.FieldSweepAnalysis.plot"]], "plot() (autodeer.reptimeanalysis method)": [[41, "autodeer.ReptimeAnalysis.plot"]], "plot() (autodeer.resonatorprofileanalysis method)": [[41, "autodeer.ResonatorProfileAnalysis.plot"]], "plot() (autodeer.sequence method)": [[41, "autodeer.Sequence.plot"], [41, "id29"], [41, "id4"]], "plot_1drelax() (in module autodeer)": [[41, "autodeer.plot_1Drelax"]], "plot_overlap() (in module autodeer)": [[41, "autodeer.plot_overlap"]], "plot_pulse_exc() (autodeer.sequence method)": [[41, "autodeer.Sequence.plot_pulse_exc"], [41, "id30"], [41, "id5"]], "primary_colors (in module autodeer)": [[41, "autodeer.primary_colors"]], "process_nutations() (autodeer.resonatorprofileanalysis method)": [[41, "autodeer.ResonatorProfileAnalysis.process_nutations"]], "round_step() (in module autodeer)": [[41, "autodeer.round_step"]], "save (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.save"]], "save() (autodeer.sequence method)": [[41, "autodeer.Sequence.save"], [41, "id21"], [41, "id46"]], "save_file() (in module autodeer)": [[41, "autodeer.save_file"]], "select_pcyc() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.select_pcyc"]], "seqtable_steps (autodeer.sequence property)": [[41, "autodeer.Sequence.seqtable_steps"], [41, "id28"], [41, "id3"]], "sequence (autodeer.epraccessor property)": [[41, "autodeer.EPRAccessor.sequence"]], "seven_pulse() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.seven_pulse"]], "shift_detfreq_to_zero() (autodeer.sequence method)": [[41, "autodeer.Sequence.shift_detfreq_to_zero"], [41, "id10"], [41, "id35"]], "simulate() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.simulate"]], "sop() (in module autodeer)": [[41, "autodeer.sop"]], "three_pulse() (autodeer.deersequence method)": [[41, "autodeer.DEERSequence.three_pulse"]], "transpose_dict_of_list() (in module autodeer)": [[41, "autodeer.transpose_dict_of_list"]], "transpose_list_of_dicts() (in module autodeer)": [[41, "autodeer.transpose_list_of_dicts"]], "val_in_ns() (in module autodeer)": [[41, "autodeer.val_in_ns"]], "val_in_us() (in module autodeer)": [[41, "autodeer.val_in_us"]], "chirppulse (class in autodeer.pulses)": [[42, "autodeer.pulses.ChirpPulse"]], "delay (class in autodeer.pulses)": [[42, "autodeer.pulses.Delay"]], "detection (class in autodeer.pulses)": [[42, "autodeer.pulses.Detection"]], "gaussianpulse (class in autodeer.pulses)": [[42, "autodeer.pulses.GaussianPulse"]], "hspulse (class in autodeer.pulses)": [[42, "autodeer.pulses.HSPulse"]], "pulse (class in autodeer.pulses)": [[42, "autodeer.pulses.Pulse"]], "rectpulse (class in autodeer.pulses)": [[42, "autodeer.pulses.RectPulse"]], "sincpulse (class in autodeer.pulses)": [[42, "autodeer.pulses.SincPulse"]], "__str__() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.__str__"]], "_addphasecycle() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse._addPhaseCycle"]], "_buildfmam() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse._buildFMAM"]], "_calc_fft() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse._calc_fft"]], "_from_dict() (autodeer.pulses.pulse class method)": [[42, "autodeer.pulses.Pulse._from_dict"]], "_from_json() (autodeer.pulses.pulse class method)": [[42, "autodeer.pulses.Pulse._from_json"]], "_pcyc_str() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse._pcyc_str"]], "_to_dict() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse._to_dict"]], "_to_json() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse._to_json"]], "autodeer.pulses": [[42, "module-autodeer.pulses"]], "build_default_pulses() (in module autodeer.pulses)": [[42, "autodeer.pulses.build_default_pulses"]], "build_shape() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.build_shape"]], "build_table() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.build_table"]], "copy() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.copy"]], "exciteprofile() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.exciteprofile"]], "func() (autodeer.pulses.chirppulse method)": [[42, "autodeer.pulses.ChirpPulse.func"]], "func() (autodeer.pulses.gaussianpulse method)": [[42, "autodeer.pulses.GaussianPulse.func"]], "func() (autodeer.pulses.hspulse method)": [[42, "autodeer.pulses.HSPulse.func"]], "func() (autodeer.pulses.rectpulse method)": [[42, "autodeer.pulses.RectPulse.func"]], "func() (autodeer.pulses.sincpulse method)": [[42, "autodeer.pulses.SincPulse.func"]], "isdelayfocused() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.isDelayFocused"]], "ispulsefocused() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.isPulseFocused"]], "is_static() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.is_static"]], "load() (autodeer.pulses.pulse class method)": [[42, "autodeer.pulses.Pulse.load"]], "plot() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.plot"]], "plot_fft() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.plot_fft"]], "save() (autodeer.pulses.pulse method)": [[42, "autodeer.pulses.Pulse.save"]], "reporter (class in autodeer.reporter)": [[43, "autodeer.reporter.Reporter"]], "svgflowable (class in autodeer.reporter)": [[43, "autodeer.reporter.SvgFlowable"]], "_build() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter._build"]], "add_code_block() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_code_block"]], "add_figure() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_figure"]], "add_new_section() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_new_section"]], "add_page_break() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_page_break"]], "add_space() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_space"]], "add_table() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_table"]], "add_text() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_text"]], "add_title() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.add_title"]], "autodeer.reporter": [[43, "module-autodeer.reporter"]], "combo_figure() (in module autodeer.reporter)": [[43, "autodeer.reporter.combo_figure"]], "create_report() (in module autodeer.reporter)": [[43, "autodeer.reporter.create_report"]], "draw() (autodeer.reporter.svgflowable method)": [[43, "autodeer.reporter.SvgFlowable.draw"]], "footer() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.footer"]], "header() (autodeer.reporter.reporter method)": [[43, "autodeer.reporter.Reporter.header"]], "package_dir (in module autodeer.reporter)": [[43, "autodeer.reporter.package_dir"]], "styles (in module autodeer.reporter)": [[43, "autodeer.reporter.styles"]], "wrap() (autodeer.reporter.svgflowable method)": [[43, "autodeer.reporter.SvgFlowable.wrap"]], "carrpurcellsequence (class in autodeer.sequences)": [[44, "autodeer.sequences.CarrPurcellSequence"]], "deersequence (class in autodeer.sequences)": [[44, "autodeer.sequences.DEERSequence"]], "fieldsweepsequence (class in autodeer.sequences)": [[44, "autodeer.sequences.FieldSweepSequence"]], "hahnechosequence (class in autodeer.sequences)": [[44, "autodeer.sequences.HahnEchoSequence"]], "refocusedecho2dsequence (class in autodeer.sequences)": [[44, "autodeer.sequences.RefocusedEcho2DSequence"]], "reptimescan (class in autodeer.sequences)": [[44, "autodeer.sequences.ReptimeScan"]], "resonatorprofilesequence (class in autodeer.sequences)": [[44, "autodeer.sequences.ResonatorProfileSequence"]], "sequence (class in autodeer.sequences)": [[44, "autodeer.sequences.Sequence"]], "t2relaxationsequence (class in autodeer.sequences)": [[44, "autodeer.sequences.T2RelaxationSequence"]], "twtprofilesequence (class in autodeer.sequences)": [[44, "autodeer.sequences.TWTProfileSequence"]], "__str__() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.__str__"]], "_buildphasecycle() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._buildPhaseCycle"]], "_build_sequence() (autodeer.sequences.carrpurcellsequence method)": [[44, "autodeer.sequences.CarrPurcellSequence._build_sequence"]], "_build_sequence() (autodeer.sequences.refocusedecho2dsequence method)": [[44, "autodeer.sequences.RefocusedEcho2DSequence._build_sequence"]], "_build_sequence() (autodeer.sequences.resonatorprofilesequence method)": [[44, "autodeer.sequences.ResonatorProfileSequence._build_sequence"]], "_build_sequence() (autodeer.sequences.twtprofilesequence method)": [[44, "autodeer.sequences.TWTProfileSequence._build_sequence"]], "_checkrect() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._checkRect"]], "_convert_to_delay() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._convert_to_delay"]], "_convert_to_pulses() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._convert_to_pulses"]], "_estimate_time() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._estimate_time"]], "_from_dict() (autodeer.sequences.sequence class method)": [[44, "autodeer.sequences.Sequence._from_dict"]], "_from_json() (autodeer.sequences.sequence class method)": [[44, "autodeer.sequences.Sequence._from_json"]], "_to_dict() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._to_dict"]], "_to_json() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence._to_json"]], "addpulse() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.addPulse"]], "add_eseem_avg() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.add_ESEEM_avg"]], "autodeer.sequences": [[44, "module-autodeer.sequences"]], "convert() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.convert"]], "copy() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.copy"]], "evolution() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.evolution"]], "five_pulse() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.five_pulse"]], "four_pulse() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.four_pulse"]], "isdelayfocused() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.isDelayFocused"]], "ispulsefocused() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.isPulseFocused"]], "load() (autodeer.sequences.sequence class method)": [[44, "autodeer.sequences.Sequence.load"]], "ndeer_cp() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.nDEER_CP"]], "plot() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.plot"]], "plot_pulse_exc() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.plot_pulse_exc"]], "save() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.save"]], "select_pcyc() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.select_pcyc"]], "seqtable_steps (autodeer.sequences.sequence property)": [[44, "autodeer.sequences.Sequence.seqtable_steps"]], "seven_pulse() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.seven_pulse"]], "shift_detfreq_to_zero() (autodeer.sequences.sequence method)": [[44, "autodeer.sequences.Sequence.shift_detfreq_to_zero"]], "simulate() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.simulate"]], "three_pulse() (autodeer.sequences.deersequence method)": [[44, "autodeer.sequences.DEERSequence.three_pulse"]], "autodeer.tools": [[45, "module-autodeer.tools"]], "eprload() (in module autodeer.tools)": [[45, "autodeer.tools.eprload"]], "log (in module autodeer.tools)": [[45, "autodeer.tools.log"]], "progress_bar() (in module autodeer.tools)": [[45, "autodeer.tools.progress_bar"]], "progress_bar_frac() (in module autodeer.tools)": [[45, "autodeer.tools.progress_bar_frac"]], "autoeprdecoder() (in module autodeer.utils)": [[46, "autodeer.utils.autoEPRDecoder"]], "autodeer.utils": [[46, "module-autodeer.utils"]], "build_table() (in module autodeer.utils)": [[46, "autodeer.utils.build_table"]], "gcd() (in module autodeer.utils)": [[46, "autodeer.utils.gcd"]], "round_step() (in module autodeer.utils)": [[46, "autodeer.utils.round_step"]], "save_file() (in module autodeer.utils)": [[46, "autodeer.utils.save_file"]], "sop() (in module autodeer.utils)": [[46, "autodeer.utils.sop"]], "transpose_dict_of_list() (in module autodeer.utils)": [[46, "autodeer.utils.transpose_dict_of_list"]], "transpose_list_of_dicts() (in module autodeer.utils)": [[46, "autodeer.utils.transpose_list_of_dicts"]], "val_in_ns() (in module autodeer.utils)": [[46, "autodeer.utils.val_in_ns"]], "val_in_us() (in module autodeer.utils)": [[46, "autodeer.utils.val_in_us"]]}})